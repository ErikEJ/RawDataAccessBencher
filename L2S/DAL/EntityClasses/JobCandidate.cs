#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'JobCandidate', mapped on table 'AdventureWorks.HumanResources.JobCandidate'.</summary>
	[Table(Name="[HumanResources].[JobCandidate]")]
	public partial class JobCandidate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private Nullable<System.Int32>	_businessEntityId;
		private System.Int32	_jobCandidateId;
		private System.DateTime	_modifiedDate;
		private System.String	_resume;
		private EntityRef <Employee> _employee;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBusinessEntityIdChanging(Nullable<System.Int32> value);
		partial void OnBusinessEntityIdChanged();
		partial void OnJobCandidateIdChanging(System.Int32 value);
		partial void OnJobCandidateIdChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnResumeChanging(System.String value);
		partial void OnResumeChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="JobCandidate"/> class.</summary>
		public JobCandidate()
		{
			_employee = default(EntityRef<Employee>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the BusinessEntityId field. Mapped on target field 'BusinessEntityID'. </summary>
		[Column(Name="BusinessEntityID", Storage="_businessEntityId", DbType="int NULL")]
		public Nullable<System.Int32> BusinessEntityId
		{
			get	{ return _businessEntityId; }
			set
			{
				if((_businessEntityId != value))
				{
					if(_employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnBusinessEntityIdChanging(value);
					SendPropertyChanging("BusinessEntityId");
					_businessEntityId = value;
					SendPropertyChanged("BusinessEntityId");
					OnBusinessEntityIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the JobCandidateId field. Mapped on target field 'JobCandidateID'. </summary>
		[Column(Name="JobCandidateID", Storage="_jobCandidateId", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Int32 JobCandidateId
		{
			get	{ return _jobCandidateId; }
			set
			{
				if((_jobCandidateId != value))
				{
					OnJobCandidateIdChanging(value);
					SendPropertyChanging("JobCandidateId");
					_jobCandidateId = value;
					SendPropertyChanged("JobCandidateId");
					OnJobCandidateIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Resume field. Mapped on target field 'Resume'. </summary>
		[Column(Name="Resume", Storage="_resume", DbType="xml NULL", UpdateCheck=UpdateCheck.Never)]
		public System.String Resume
		{
			get	{ return _resume; }
			set
			{
				if((_resume != value))
				{
					OnResumeChanging(value);
					SendPropertyChanging("Resume");
					_resume = value;
					SendPropertyChanged("Resume");
					OnResumeChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'JobCandidate.Employee - Employee.JobCandidates (m:1)'</summary>
		[Association(Name="JobCandidate_Employee6a30e792c8c94bfdabdbae66d9583b57", Storage="_employee", ThisKey="BusinessEntityId", IsForeignKey=true)] 
		public Employee Employee
		{
			get { return _employee.Entity; }
			set
			{
				Employee previousValue = _employee.Entity;
				if((previousValue != value) || (_employee.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Employee");
					if(previousValue != null)
					{
						_employee.Entity = null;
						previousValue.JobCandidates.Remove(this);
					}
					_employee.Entity = value;
					if(value == null)
					{
						_businessEntityId = default(Nullable<System.Int32>);
					}
					else
					{
						value.JobCandidates.Add(this);
						_businessEntityId = value.BusinessEntityId;
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649