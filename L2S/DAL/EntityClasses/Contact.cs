#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'Contact', mapped on table 'AdventureWorks.Person.Contact'.</summary>
	[Table(Name="[Person].[Contact]")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.String	_additionalContactInfo;
		private System.Int32	_contactId;
		private System.String	_emailAddress;
		private System.Int32	_emailPromotion;
		private System.String	_firstName;
		private System.String	_lastName;
		private System.String	_middleName;
		private System.DateTime	_modifiedDate;
		private System.Boolean	_nameStyle;
		private System.String	_passwordHash;
		private System.String	_passwordSalt;
		private System.String	_phone;
		private System.Guid	_rowguid;
		private System.String	_suffix;
		private System.String	_title;
		private EntitySet <ContactCreditCard> _contactCreditCards;
		private EntitySet <Employee> _employees;
		private EntitySet <Individual> _individuals;
		private EntitySet <SalesOrderHeader> _salesOrderHeaders;
		private EntitySet <StoreContact> _storeContacts;
		private EntitySet <VendorContact> _vendorContacts;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAdditionalContactInfoChanging(System.String value);
		partial void OnAdditionalContactInfoChanged();
		partial void OnContactIdChanging(System.Int32 value);
		partial void OnContactIdChanged();
		partial void OnEmailAddressChanging(System.String value);
		partial void OnEmailAddressChanged();
		partial void OnEmailPromotionChanging(System.Int32 value);
		partial void OnEmailPromotionChanged();
		partial void OnFirstNameChanging(System.String value);
		partial void OnFirstNameChanged();
		partial void OnLastNameChanging(System.String value);
		partial void OnLastNameChanged();
		partial void OnMiddleNameChanging(System.String value);
		partial void OnMiddleNameChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameStyleChanging(System.Boolean value);
		partial void OnNameStyleChanged();
		partial void OnPasswordHashChanging(System.String value);
		partial void OnPasswordHashChanged();
		partial void OnPasswordSaltChanging(System.String value);
		partial void OnPasswordSaltChanged();
		partial void OnPhoneChanging(System.String value);
		partial void OnPhoneChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSuffixChanging(System.String value);
		partial void OnSuffixChanged();
		partial void OnTitleChanging(System.String value);
		partial void OnTitleChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Contact"/> class.</summary>
		public Contact()
		{
			_contactCreditCards = new EntitySet<ContactCreditCard>(new Action<ContactCreditCard>(this.Attach_ContactCreditCards), new Action<ContactCreditCard>(this.Detach_ContactCreditCards) );
			_employees = new EntitySet<Employee>(new Action<Employee>(this.Attach_Employees), new Action<Employee>(this.Detach_Employees) );
			_individuals = new EntitySet<Individual>(new Action<Individual>(this.Attach_Individuals), new Action<Individual>(this.Detach_Individuals) );
			_salesOrderHeaders = new EntitySet<SalesOrderHeader>(new Action<SalesOrderHeader>(this.Attach_SalesOrderHeaders), new Action<SalesOrderHeader>(this.Detach_SalesOrderHeaders) );
			_storeContacts = new EntitySet<StoreContact>(new Action<StoreContact>(this.Attach_StoreContacts), new Action<StoreContact>(this.Detach_StoreContacts) );
			_vendorContacts = new EntitySet<VendorContact>(new Action<VendorContact>(this.Attach_VendorContacts), new Action<VendorContact>(this.Detach_VendorContacts) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ContactCreditCards(ContactCreditCard entity)
		{
			this.SendPropertyChanging("ContactCreditCards");
			entity.Contact = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ContactCreditCards(ContactCreditCard entity)
		{
			this.SendPropertyChanging("ContactCreditCards");
			entity.Contact = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_Employees(Employee entity)
		{
			this.SendPropertyChanging("Employees");
			entity.Contact = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_Employees(Employee entity)
		{
			this.SendPropertyChanging("Employees");
			entity.Contact = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_Individuals(Individual entity)
		{
			this.SendPropertyChanging("Individuals");
			entity.Contact = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_Individuals(Individual entity)
		{
			this.SendPropertyChanging("Individuals");
			entity.Contact = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders");
			entity.Contact = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders");
			entity.Contact = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_StoreContacts(StoreContact entity)
		{
			this.SendPropertyChanging("StoreContacts");
			entity.Contact = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_StoreContacts(StoreContact entity)
		{
			this.SendPropertyChanging("StoreContacts");
			entity.Contact = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_VendorContacts(VendorContact entity)
		{
			this.SendPropertyChanging("VendorContacts");
			entity.Contact = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_VendorContacts(VendorContact entity)
		{
			this.SendPropertyChanging("VendorContacts");
			entity.Contact = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the AdditionalContactInfo field. Mapped on target field 'AdditionalContactInfo'. </summary>
		[Column(Name="AdditionalContactInfo", Storage="_additionalContactInfo", DbType="xml NULL", UpdateCheck=UpdateCheck.Never)]
		public System.String AdditionalContactInfo
		{
			get	{ return _additionalContactInfo; }
			set
			{
				if((_additionalContactInfo != value))
				{
					OnAdditionalContactInfoChanging(value);
					SendPropertyChanging("AdditionalContactInfo");
					_additionalContactInfo = value;
					SendPropertyChanged("AdditionalContactInfo");
					OnAdditionalContactInfoChanged();
				}
			}
		}

		/// <summary>Gets or sets the ContactId field. Mapped on target field 'ContactID'. </summary>
		[Column(Name="ContactID", Storage="_contactId", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Int32 ContactId
		{
			get	{ return _contactId; }
			set
			{
				if((_contactId != value))
				{
					OnContactIdChanging(value);
					SendPropertyChanging("ContactId");
					_contactId = value;
					SendPropertyChanged("ContactId");
					OnContactIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the EmailAddress field. Mapped on target field 'EmailAddress'. </summary>
		[Column(Name="EmailAddress", Storage="_emailAddress", DbType="nvarchar(50) NULL")]
		public System.String EmailAddress
		{
			get	{ return _emailAddress; }
			set
			{
				if((_emailAddress != value))
				{
					OnEmailAddressChanging(value);
					SendPropertyChanging("EmailAddress");
					_emailAddress = value;
					SendPropertyChanged("EmailAddress");
					OnEmailAddressChanged();
				}
			}
		}

		/// <summary>Gets or sets the EmailPromotion field. Mapped on target field 'EmailPromotion'. </summary>
		[Column(Name="EmailPromotion", Storage="_emailPromotion", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 EmailPromotion
		{
			get	{ return _emailPromotion; }
			set
			{
				if((_emailPromotion != value))
				{
					OnEmailPromotionChanging(value);
					SendPropertyChanging("EmailPromotion");
					_emailPromotion = value;
					SendPropertyChanged("EmailPromotion");
					OnEmailPromotionChanged();
				}
			}
		}

		/// <summary>Gets or sets the FirstName field. Mapped on target field 'FirstName'. </summary>
		[Column(Name="FirstName", Storage="_firstName", CanBeNull=false, DbType="nvarchar(50) NOT NULL")]
		public System.String FirstName
		{
			get	{ return _firstName; }
			set
			{
				if((_firstName != value))
				{
					OnFirstNameChanging(value);
					SendPropertyChanging("FirstName");
					_firstName = value;
					SendPropertyChanged("FirstName");
					OnFirstNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the LastName field. Mapped on target field 'LastName'. </summary>
		[Column(Name="LastName", Storage="_lastName", CanBeNull=false, DbType="nvarchar(50) NOT NULL")]
		public System.String LastName
		{
			get	{ return _lastName; }
			set
			{
				if((_lastName != value))
				{
					OnLastNameChanging(value);
					SendPropertyChanging("LastName");
					_lastName = value;
					SendPropertyChanged("LastName");
					OnLastNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the MiddleName field. Mapped on target field 'MiddleName'. </summary>
		[Column(Name="MiddleName", Storage="_middleName", DbType="nvarchar(50) NULL")]
		public System.String MiddleName
		{
			get	{ return _middleName; }
			set
			{
				if((_middleName != value))
				{
					OnMiddleNameChanging(value);
					SendPropertyChanging("MiddleName");
					_middleName = value;
					SendPropertyChanged("MiddleName");
					OnMiddleNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the NameStyle field. Mapped on target field 'NameStyle'. </summary>
		[Column(Name="NameStyle", Storage="_nameStyle", CanBeNull=false, DbType="bit NOT NULL")]
		public System.Boolean NameStyle
		{
			get	{ return _nameStyle; }
			set
			{
				if((_nameStyle != value))
				{
					OnNameStyleChanging(value);
					SendPropertyChanging("NameStyle");
					_nameStyle = value;
					SendPropertyChanged("NameStyle");
					OnNameStyleChanged();
				}
			}
		}

		/// <summary>Gets or sets the PasswordHash field. Mapped on target field 'PasswordHash'. </summary>
		[Column(Name="PasswordHash", Storage="_passwordHash", CanBeNull=false, DbType="varchar(40) NOT NULL")]
		public System.String PasswordHash
		{
			get	{ return _passwordHash; }
			set
			{
				if((_passwordHash != value))
				{
					OnPasswordHashChanging(value);
					SendPropertyChanging("PasswordHash");
					_passwordHash = value;
					SendPropertyChanged("PasswordHash");
					OnPasswordHashChanged();
				}
			}
		}

		/// <summary>Gets or sets the PasswordSalt field. Mapped on target field 'PasswordSalt'. </summary>
		[Column(Name="PasswordSalt", Storage="_passwordSalt", CanBeNull=false, DbType="varchar(10) NOT NULL")]
		public System.String PasswordSalt
		{
			get	{ return _passwordSalt; }
			set
			{
				if((_passwordSalt != value))
				{
					OnPasswordSaltChanging(value);
					SendPropertyChanging("PasswordSalt");
					_passwordSalt = value;
					SendPropertyChanged("PasswordSalt");
					OnPasswordSaltChanged();
				}
			}
		}

		/// <summary>Gets or sets the Phone field. Mapped on target field 'Phone'. </summary>
		[Column(Name="Phone", Storage="_phone", DbType="nvarchar(25) NULL")]
		public System.String Phone
		{
			get	{ return _phone; }
			set
			{
				if((_phone != value))
				{
					OnPhoneChanging(value);
					SendPropertyChanging("Phone");
					_phone = value;
					SendPropertyChanged("Phone");
					OnPhoneChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the Suffix field. Mapped on target field 'Suffix'. </summary>
		[Column(Name="Suffix", Storage="_suffix", DbType="nvarchar(10) NULL")]
		public System.String Suffix
		{
			get	{ return _suffix; }
			set
			{
				if((_suffix != value))
				{
					OnSuffixChanging(value);
					SendPropertyChanging("Suffix");
					_suffix = value;
					SendPropertyChanged("Suffix");
					OnSuffixChanged();
				}
			}
		}

		/// <summary>Gets or sets the Title field. Mapped on target field 'Title'. </summary>
		[Column(Name="Title", Storage="_title", DbType="nvarchar(8) NULL")]
		public System.String Title
		{
			get	{ return _title; }
			set
			{
				if((_title != value))
				{
					OnTitleChanging(value);
					SendPropertyChanging("Title");
					_title = value;
					SendPropertyChanged("Title");
					OnTitleChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'ContactCreditCard.Contact - Contact.ContactCreditCards (m:1)'</summary>
		[Association(Name="ContactCreditCard_Contact2aace8db3ff64756863e9a1231616848", Storage="_contactCreditCards", OtherKey="ContactId")]
		public EntitySet<ContactCreditCard> ContactCreditCards
		{
			get { return this._contactCreditCards; }
			set { this._contactCreditCards.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Employee.Contact - Contact.Employees (m:1)'</summary>
		[Association(Name="Employee_Contactb361864d558c44d8a18d902bb1927645", Storage="_employees", OtherKey="ContactId")]
		public EntitySet<Employee> Employees
		{
			get { return this._employees; }
			set { this._employees.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Individual.Contact - Contact.Individuals (m:1)'</summary>
		[Association(Name="Individual_Contacte6736a6f33be4376a7c48e2845f7eddd", Storage="_individuals", OtherKey="ContactId")]
		public EntitySet<Individual> Individuals
		{
			get { return this._individuals; }
			set { this._individuals.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.Contact - Contact.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_Contact9fca4fd4d9b44d1d8c1a3b2278adcdfc", Storage="_salesOrderHeaders", OtherKey="ContactId")]
		public EntitySet<SalesOrderHeader> SalesOrderHeaders
		{
			get { return this._salesOrderHeaders; }
			set { this._salesOrderHeaders.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'StoreContact.Contact - Contact.StoreContacts (m:1)'</summary>
		[Association(Name="StoreContact_Contact555fba67abb0468ead9ff3ce1ca439c1", Storage="_storeContacts", OtherKey="ContactId")]
		public EntitySet<StoreContact> StoreContacts
		{
			get { return this._storeContacts; }
			set { this._storeContacts.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'VendorContact.Contact - Contact.VendorContacts (m:1)'</summary>
		[Association(Name="VendorContact_Contact7699fed05c1f4d68b412badf9fbea85c", Storage="_vendorContacts", OtherKey="ContactId")]
		public EntitySet<VendorContact> VendorContacts
		{
			get { return this._vendorContacts; }
			set { this._vendorContacts.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649