#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'SalesPerson', mapped on table 'AdventureWorks.Sales.SalesPerson'.</summary>
	[Table(Name="[Sales].[SalesPerson]")]
	public partial class SalesPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Decimal	_bonus;
		private System.Decimal	_commissionPct;
		private System.DateTime	_modifiedDate;
		private System.Guid	_rowguid;
		private System.Decimal	_salesLastYear;
		private System.Int32	_salesPersonId;
		private Nullable<System.Decimal>	_salesQuota;
		private System.Decimal	_salesYtd;
		private Nullable<System.Int32>	_territoryId;
		private EntityRef <Employee> _employee;
		private EntitySet <SalesOrderHeader> _salesOrderHeaders;
		private EntitySet <SalesPersonQuotaHistory> _salesPersonQuotaHistories;
		private EntityRef <SalesTerritory> _salesTerritory;
		private EntitySet <SalesTerritoryHistory> _salesTerritoryHistories;
		private EntitySet <Store> _stores;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBonusChanging(System.Decimal value);
		partial void OnBonusChanged();
		partial void OnCommissionPctChanging(System.Decimal value);
		partial void OnCommissionPctChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSalesLastYearChanging(System.Decimal value);
		partial void OnSalesLastYearChanged();
		partial void OnSalesPersonIdChanging(System.Int32 value);
		partial void OnSalesPersonIdChanged();
		partial void OnSalesQuotaChanging(Nullable<System.Decimal> value);
		partial void OnSalesQuotaChanged();
		partial void OnSalesYtdChanging(System.Decimal value);
		partial void OnSalesYtdChanged();
		partial void OnTerritoryIdChanging(Nullable<System.Int32> value);
		partial void OnTerritoryIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="SalesPerson"/> class.</summary>
		public SalesPerson()
		{
			_employee = default(EntityRef<Employee>);
			_salesOrderHeaders = new EntitySet<SalesOrderHeader>(new Action<SalesOrderHeader>(this.Attach_SalesOrderHeaders), new Action<SalesOrderHeader>(this.Detach_SalesOrderHeaders) );
			_salesPersonQuotaHistories = new EntitySet<SalesPersonQuotaHistory>(new Action<SalesPersonQuotaHistory>(this.Attach_SalesPersonQuotaHistories), new Action<SalesPersonQuotaHistory>(this.Detach_SalesPersonQuotaHistories) );
			_salesTerritory = default(EntityRef<SalesTerritory>);
			_salesTerritoryHistories = new EntitySet<SalesTerritoryHistory>(new Action<SalesTerritoryHistory>(this.Attach_SalesTerritoryHistories), new Action<SalesTerritoryHistory>(this.Detach_SalesTerritoryHistories) );
			_stores = new EntitySet<Store>(new Action<Store>(this.Attach_Stores), new Action<Store>(this.Detach_Stores) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders");
			entity.SalesPerson = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging("SalesOrderHeaders");
			entity.SalesPerson = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesPersonQuotaHistories(SalesPersonQuotaHistory entity)
		{
			this.SendPropertyChanging("SalesPersonQuotaHistories");
			entity.SalesPerson = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesPersonQuotaHistories(SalesPersonQuotaHistory entity)
		{
			this.SendPropertyChanging("SalesPersonQuotaHistories");
			entity.SalesPerson = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesTerritoryHistories(SalesTerritoryHistory entity)
		{
			this.SendPropertyChanging("SalesTerritoryHistories");
			entity.SalesPerson = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesTerritoryHistories(SalesTerritoryHistory entity)
		{
			this.SendPropertyChanging("SalesTerritoryHistories");
			entity.SalesPerson = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_Stores(Store entity)
		{
			this.SendPropertyChanging("Stores");
			entity.SalesPerson = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_Stores(Store entity)
		{
			this.SendPropertyChanging("Stores");
			entity.SalesPerson = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the Bonus field. Mapped on target field 'Bonus'. </summary>
		[Column(Name="Bonus", Storage="_bonus", CanBeNull=false, DbType="money NOT NULL")]
		public System.Decimal Bonus
		{
			get	{ return _bonus; }
			set
			{
				if((_bonus != value))
				{
					OnBonusChanging(value);
					SendPropertyChanging("Bonus");
					_bonus = value;
					SendPropertyChanged("Bonus");
					OnBonusChanged();
				}
			}
		}

		/// <summary>Gets or sets the CommissionPct field. Mapped on target field 'CommissionPct'. </summary>
		[Column(Name="CommissionPct", Storage="_commissionPct", CanBeNull=false, DbType="smallmoney NOT NULL")]
		public System.Decimal CommissionPct
		{
			get	{ return _commissionPct; }
			set
			{
				if((_commissionPct != value))
				{
					OnCommissionPctChanging(value);
					SendPropertyChanging("CommissionPct");
					_commissionPct = value;
					SendPropertyChanged("CommissionPct");
					OnCommissionPctChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesLastYear field. Mapped on target field 'SalesLastYear'. </summary>
		[Column(Name="SalesLastYear", Storage="_salesLastYear", CanBeNull=false, DbType="money NOT NULL")]
		public System.Decimal SalesLastYear
		{
			get	{ return _salesLastYear; }
			set
			{
				if((_salesLastYear != value))
				{
					OnSalesLastYearChanging(value);
					SendPropertyChanging("SalesLastYear");
					_salesLastYear = value;
					SendPropertyChanged("SalesLastYear");
					OnSalesLastYearChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesPersonId field. Mapped on target field 'SalesPersonID'. </summary>
		[Column(Name="SalesPersonID", Storage="_salesPersonId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 SalesPersonId
		{
			get	{ return _salesPersonId; }
			set
			{
				if((_salesPersonId != value))
				{
					if(_employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnSalesPersonIdChanging(value);
					SendPropertyChanging("SalesPersonId");
					_salesPersonId = value;
					SendPropertyChanged("SalesPersonId");
					OnSalesPersonIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesQuota field. Mapped on target field 'SalesQuota'. </summary>
		[Column(Name="SalesQuota", Storage="_salesQuota", DbType="money NULL")]
		public Nullable<System.Decimal> SalesQuota
		{
			get	{ return _salesQuota; }
			set
			{
				if((_salesQuota != value))
				{
					OnSalesQuotaChanging(value);
					SendPropertyChanging("SalesQuota");
					_salesQuota = value;
					SendPropertyChanged("SalesQuota");
					OnSalesQuotaChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesYtd field. Mapped on target field 'SalesYTD'. </summary>
		[Column(Name="SalesYTD", Storage="_salesYtd", CanBeNull=false, DbType="money NOT NULL")]
		public System.Decimal SalesYtd
		{
			get	{ return _salesYtd; }
			set
			{
				if((_salesYtd != value))
				{
					OnSalesYtdChanging(value);
					SendPropertyChanging("SalesYtd");
					_salesYtd = value;
					SendPropertyChanged("SalesYtd");
					OnSalesYtdChanged();
				}
			}
		}

		/// <summary>Gets or sets the TerritoryId field. Mapped on target field 'TerritoryID'. </summary>
		[Column(Name="TerritoryID", Storage="_territoryId", DbType="int NULL")]
		public Nullable<System.Int32> TerritoryId
		{
			get	{ return _territoryId; }
			set
			{
				if((_territoryId != value))
				{
					if(_salesTerritory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnTerritoryIdChanging(value);
					SendPropertyChanging("TerritoryId");
					_territoryId = value;
					SendPropertyChanged("TerritoryId");
					OnTerritoryIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'SalesPerson.Employee - Employee.SalesPerson (1:1)'</summary>
		[Association(Name="SalesPerson_Employee9dd86acd996e41af974a98d04cc724d7", Storage="_employee", ThisKey="SalesPersonId", IsForeignKey=true, IsUnique=true)]
		public Employee Employee
		{
			get { return _employee.Entity; }
			set
			{
				Employee previousValue = _employee.Entity;
				if((previousValue != value) || (_employee.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Employee");
					if(previousValue != null)
					{
						_employee.Entity = null;
						previousValue.SalesPerson=null;
					}
					_employee.Entity = value;
					if(value==null)
					{
						_salesPersonId = default(System.Int32);
					}
					else
					{
						value.SalesPerson = this;
						_salesPersonId = value.EmployeeId;
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.SalesPerson - SalesPerson.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_SalesPerson2b7ba8c290a147d1ae5168e33baab2d6", Storage="_salesOrderHeaders", OtherKey="SalesPersonId")]
		public EntitySet<SalesOrderHeader> SalesOrderHeaders
		{
			get { return this._salesOrderHeaders; }
			set { this._salesOrderHeaders.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesPersonQuotaHistory.SalesPerson - SalesPerson.SalesPersonQuotaHistories (m:1)'</summary>
		[Association(Name="SalesPersonQuotaHistory_SalesPersonb35ee7c559514d8d8eb072559f8bb641", Storage="_salesPersonQuotaHistories", OtherKey="SalesPersonId")]
		public EntitySet<SalesPersonQuotaHistory> SalesPersonQuotaHistories
		{
			get { return this._salesPersonQuotaHistories; }
			set { this._salesPersonQuotaHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesPerson.SalesTerritory - SalesTerritory.SalesPeople (m:1)'</summary>
		[Association(Name="SalesPerson_SalesTerritoryf8210c025654468ab822c2fc043a1cfc", Storage="_salesTerritory", ThisKey="TerritoryId", IsForeignKey=true)] 
		public SalesTerritory SalesTerritory
		{
			get { return _salesTerritory.Entity; }
			set
			{
				SalesTerritory previousValue = _salesTerritory.Entity;
				if((previousValue != value) || (_salesTerritory.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SalesTerritory");
					if(previousValue != null)
					{
						_salesTerritory.Entity = null;
						previousValue.SalesPeople.Remove(this);
					}
					_salesTerritory.Entity = value;
					if(value == null)
					{
						_territoryId = default(Nullable<System.Int32>);
					}
					else
					{
						value.SalesPeople.Add(this);
						_territoryId = value.TerritoryId;
					}
					this.SendPropertyChanged("SalesTerritory");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesTerritoryHistory.SalesPerson - SalesPerson.SalesTerritoryHistories (m:1)'</summary>
		[Association(Name="SalesTerritoryHistory_SalesPerson6b2fe0cd26254181a705c87f07336af2", Storage="_salesTerritoryHistories", OtherKey="SalesPersonId")]
		public EntitySet<SalesTerritoryHistory> SalesTerritoryHistories
		{
			get { return this._salesTerritoryHistories; }
			set { this._salesTerritoryHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Store.SalesPerson - SalesPerson.Stores (m:1)'</summary>
		[Association(Name="Store_SalesPerson3c8cbca9603e4e52a266f82a3ce6d70c", Storage="_stores", OtherKey="SalesPersonId")]
		public EntitySet<Store> Stores
		{
			get { return this._stores; }
			set { this._stores.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649