#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'AddressType', mapped on table 'AdventureWorks.Person.AddressType'.</summary>
	[Table(Name="[Person].[AddressType]")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_addressTypeId;
		private System.DateTime	_modifiedDate;
		private System.String	_name;
		private System.Guid	_rowguid;
		private EntitySet <CustomerAddress> _customerAddresses;
		private EntitySet <VendorAddress> _vendorAddresses;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAddressTypeIdChanging(System.Int32 value);
		partial void OnAddressTypeIdChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameChanging(System.String value);
		partial void OnNameChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="AddressType"/> class.</summary>
		public AddressType()
		{
			_customerAddresses = new EntitySet<CustomerAddress>(new Action<CustomerAddress>(this.Attach_CustomerAddresses), new Action<CustomerAddress>(this.Detach_CustomerAddresses) );
			_vendorAddresses = new EntitySet<VendorAddress>(new Action<VendorAddress>(this.Attach_VendorAddresses), new Action<VendorAddress>(this.Detach_VendorAddresses) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging("CustomerAddresses");
			entity.AddressType = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_CustomerAddresses(CustomerAddress entity)
		{
			this.SendPropertyChanging("CustomerAddresses");
			entity.AddressType = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_VendorAddresses(VendorAddress entity)
		{
			this.SendPropertyChanging("VendorAddresses");
			entity.AddressType = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_VendorAddresses(VendorAddress entity)
		{
			this.SendPropertyChanging("VendorAddresses");
			entity.AddressType = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the AddressTypeId field. Mapped on target field 'AddressTypeID'. </summary>
		[Column(Name="AddressTypeID", Storage="_addressTypeId", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Int32 AddressTypeId
		{
			get	{ return _addressTypeId; }
			set
			{
				if((_addressTypeId != value))
				{
					OnAddressTypeIdChanging(value);
					SendPropertyChanging("AddressTypeId");
					_addressTypeId = value;
					SendPropertyChanged("AddressTypeId");
					OnAddressTypeIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Name field. Mapped on target field 'Name'. </summary>
		[Column(Name="Name", Storage="_name", CanBeNull=false, DbType="nvarchar(50) NOT NULL")]
		public System.String Name
		{
			get	{ return _name; }
			set
			{
				if((_name != value))
				{
					OnNameChanging(value);
					SendPropertyChanging("Name");
					_name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'CustomerAddress.AddressType - AddressType.CustomerAddresses (m:1)'</summary>
		[Association(Name="CustomerAddress_AddressTyped15bff5c97da4943bfdcbb7825f58f3e", Storage="_customerAddresses", OtherKey="AddressTypeId")]
		public EntitySet<CustomerAddress> CustomerAddresses
		{
			get { return this._customerAddresses; }
			set { this._customerAddresses.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'VendorAddress.AddressType - AddressType.VendorAddresses (m:1)'</summary>
		[Association(Name="VendorAddress_AddressTypec9f4bec903224c8ca948f66a07cf84e8", Storage="_vendorAddresses", OtherKey="AddressTypeId")]
		public EntitySet<VendorAddress> VendorAddresses
		{
			get { return this._vendorAddresses; }
			set { this._vendorAddresses.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649