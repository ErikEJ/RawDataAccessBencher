#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'Person', mapped on table 'AdventureWorks.Person.Person'.</summary>
	[Table(Name="[Person].[Person]")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.String	_additionalContactInfo;
		private System.Int32	_businessEntityId;
		private System.String	_demographics;
		private System.Int32	_emailPromotion;
		private System.String	_firstName;
		private System.String	_lastName;
		private System.String	_middleName;
		private System.DateTime	_modifiedDate;
		private System.Boolean	_nameStyle;
		private System.String	_personType;
		private System.Guid	_rowguid;
		private System.String	_suffix;
		private System.String	_title;
		private EntityRef <BusinessEntity> _businessEntity;
		private EntitySet <BusinessEntityContact> _businessEntityContacts;
		private EntitySet <Customer> _customers;
		private EntitySet <EmailAddress> _emailAddresses;
		private EntityRef <Employee> _employee;
		private EntityRef <Password> _password;
		private EntitySet <PersonCreditCard> _personCreditCards;
		private EntitySet <PersonPhone> _personPhones;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAdditionalContactInfoChanging(System.String value);
		partial void OnAdditionalContactInfoChanged();
		partial void OnBusinessEntityIdChanging(System.Int32 value);
		partial void OnBusinessEntityIdChanged();
		partial void OnDemographicsChanging(System.String value);
		partial void OnDemographicsChanged();
		partial void OnEmailPromotionChanging(System.Int32 value);
		partial void OnEmailPromotionChanged();
		partial void OnFirstNameChanging(System.String value);
		partial void OnFirstNameChanged();
		partial void OnLastNameChanging(System.String value);
		partial void OnLastNameChanged();
		partial void OnMiddleNameChanging(System.String value);
		partial void OnMiddleNameChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameStyleChanging(System.Boolean value);
		partial void OnNameStyleChanged();
		partial void OnPersonTypeChanging(System.String value);
		partial void OnPersonTypeChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSuffixChanging(System.String value);
		partial void OnSuffixChanged();
		partial void OnTitleChanging(System.String value);
		partial void OnTitleChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Person"/> class.</summary>
		public Person()
		{
			_businessEntity = default(EntityRef<BusinessEntity>);
			_businessEntityContacts = new EntitySet<BusinessEntityContact>(new Action<BusinessEntityContact>(this.Attach_BusinessEntityContacts), new Action<BusinessEntityContact>(this.Detach_BusinessEntityContacts) );
			_customers = new EntitySet<Customer>(new Action<Customer>(this.Attach_Customers), new Action<Customer>(this.Detach_Customers) );
			_emailAddresses = new EntitySet<EmailAddress>(new Action<EmailAddress>(this.Attach_EmailAddresses), new Action<EmailAddress>(this.Detach_EmailAddresses) );
			_employee = default(EntityRef<Employee>);
			_password = default(EntityRef<Password>);
			_personCreditCards = new EntitySet<PersonCreditCard>(new Action<PersonCreditCard>(this.Attach_PersonCreditCards), new Action<PersonCreditCard>(this.Detach_PersonCreditCards) );
			_personPhones = new EntitySet<PersonPhone>(new Action<PersonPhone>(this.Attach_PersonPhones), new Action<PersonPhone>(this.Detach_PersonPhones) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_BusinessEntityContacts(BusinessEntityContact entity)
		{
			this.SendPropertyChanging("BusinessEntityContacts");
			entity.Person = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_BusinessEntityContacts(BusinessEntityContact entity)
		{
			this.SendPropertyChanging("BusinessEntityContacts");
			entity.Person = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_Customers(Customer entity)
		{
			this.SendPropertyChanging("Customers");
			entity.Person = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_Customers(Customer entity)
		{
			this.SendPropertyChanging("Customers");
			entity.Person = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_EmailAddresses(EmailAddress entity)
		{
			this.SendPropertyChanging("EmailAddresses");
			entity.Person = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_EmailAddresses(EmailAddress entity)
		{
			this.SendPropertyChanging("EmailAddresses");
			entity.Person = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_PersonCreditCards(PersonCreditCard entity)
		{
			this.SendPropertyChanging("PersonCreditCards");
			entity.Person = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_PersonCreditCards(PersonCreditCard entity)
		{
			this.SendPropertyChanging("PersonCreditCards");
			entity.Person = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_PersonPhones(PersonPhone entity)
		{
			this.SendPropertyChanging("PersonPhones");
			entity.Person = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_PersonPhones(PersonPhone entity)
		{
			this.SendPropertyChanging("PersonPhones");
			entity.Person = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the AdditionalContactInfo field. Mapped on target field 'AdditionalContactInfo'. </summary>
		[Column(Name="AdditionalContactInfo", Storage="_additionalContactInfo", DbType="xml NULL", UpdateCheck=UpdateCheck.Never)]
		public System.String AdditionalContactInfo
		{
			get	{ return _additionalContactInfo; }
			set
			{
				if((_additionalContactInfo != value))
				{
					OnAdditionalContactInfoChanging(value);
					SendPropertyChanging("AdditionalContactInfo");
					_additionalContactInfo = value;
					SendPropertyChanged("AdditionalContactInfo");
					OnAdditionalContactInfoChanged();
				}
			}
		}

		/// <summary>Gets or sets the BusinessEntityId field. Mapped on target field 'BusinessEntityID'. </summary>
		[Column(Name="BusinessEntityID", Storage="_businessEntityId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 BusinessEntityId
		{
			get	{ return _businessEntityId; }
			set
			{
				if((_businessEntityId != value))
				{
					if(_businessEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnBusinessEntityIdChanging(value);
					SendPropertyChanging("BusinessEntityId");
					_businessEntityId = value;
					SendPropertyChanged("BusinessEntityId");
					OnBusinessEntityIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the Demographics field. Mapped on target field 'Demographics'. </summary>
		[Column(Name="Demographics", Storage="_demographics", DbType="xml NULL", UpdateCheck=UpdateCheck.Never)]
		public System.String Demographics
		{
			get	{ return _demographics; }
			set
			{
				if((_demographics != value))
				{
					OnDemographicsChanging(value);
					SendPropertyChanging("Demographics");
					_demographics = value;
					SendPropertyChanged("Demographics");
					OnDemographicsChanged();
				}
			}
		}

		/// <summary>Gets or sets the EmailPromotion field. Mapped on target field 'EmailPromotion'. </summary>
		[Column(Name="EmailPromotion", Storage="_emailPromotion", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 EmailPromotion
		{
			get	{ return _emailPromotion; }
			set
			{
				if((_emailPromotion != value))
				{
					OnEmailPromotionChanging(value);
					SendPropertyChanging("EmailPromotion");
					_emailPromotion = value;
					SendPropertyChanged("EmailPromotion");
					OnEmailPromotionChanged();
				}
			}
		}

		/// <summary>Gets or sets the FirstName field. Mapped on target field 'FirstName'. </summary>
		[Column(Name="FirstName", Storage="_firstName", CanBeNull=false, DbType="nvarchar(50) NOT NULL")]
		public System.String FirstName
		{
			get	{ return _firstName; }
			set
			{
				if((_firstName != value))
				{
					OnFirstNameChanging(value);
					SendPropertyChanging("FirstName");
					_firstName = value;
					SendPropertyChanged("FirstName");
					OnFirstNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the LastName field. Mapped on target field 'LastName'. </summary>
		[Column(Name="LastName", Storage="_lastName", CanBeNull=false, DbType="nvarchar(50) NOT NULL")]
		public System.String LastName
		{
			get	{ return _lastName; }
			set
			{
				if((_lastName != value))
				{
					OnLastNameChanging(value);
					SendPropertyChanging("LastName");
					_lastName = value;
					SendPropertyChanged("LastName");
					OnLastNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the MiddleName field. Mapped on target field 'MiddleName'. </summary>
		[Column(Name="MiddleName", Storage="_middleName", DbType="nvarchar(50) NULL")]
		public System.String MiddleName
		{
			get	{ return _middleName; }
			set
			{
				if((_middleName != value))
				{
					OnMiddleNameChanging(value);
					SendPropertyChanging("MiddleName");
					_middleName = value;
					SendPropertyChanged("MiddleName");
					OnMiddleNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the NameStyle field. Mapped on target field 'NameStyle'. </summary>
		[Column(Name="NameStyle", Storage="_nameStyle", CanBeNull=false, DbType="bit NOT NULL")]
		public System.Boolean NameStyle
		{
			get	{ return _nameStyle; }
			set
			{
				if((_nameStyle != value))
				{
					OnNameStyleChanging(value);
					SendPropertyChanging("NameStyle");
					_nameStyle = value;
					SendPropertyChanged("NameStyle");
					OnNameStyleChanged();
				}
			}
		}

		/// <summary>Gets or sets the PersonType field. Mapped on target field 'PersonType'. </summary>
		[Column(Name="PersonType", Storage="_personType", CanBeNull=false, DbType="nchar(2) NOT NULL")]
		public System.String PersonType
		{
			get	{ return _personType; }
			set
			{
				if((_personType != value))
				{
					OnPersonTypeChanging(value);
					SendPropertyChanging("PersonType");
					_personType = value;
					SendPropertyChanged("PersonType");
					OnPersonTypeChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the Suffix field. Mapped on target field 'Suffix'. </summary>
		[Column(Name="Suffix", Storage="_suffix", DbType="nvarchar(10) NULL")]
		public System.String Suffix
		{
			get	{ return _suffix; }
			set
			{
				if((_suffix != value))
				{
					OnSuffixChanging(value);
					SendPropertyChanging("Suffix");
					_suffix = value;
					SendPropertyChanged("Suffix");
					OnSuffixChanged();
				}
			}
		}

		/// <summary>Gets or sets the Title field. Mapped on target field 'Title'. </summary>
		[Column(Name="Title", Storage="_title", DbType="nvarchar(8) NULL")]
		public System.String Title
		{
			get	{ return _title; }
			set
			{
				if((_title != value))
				{
					OnTitleChanging(value);
					SendPropertyChanging("Title");
					_title = value;
					SendPropertyChanged("Title");
					OnTitleChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'Person.BusinessEntity - BusinessEntity.Person (1:1)'</summary>
		[Association(Name="Person_BusinessEntityb19460eb95d14912890328fb4a2bc589", Storage="_businessEntity", ThisKey="BusinessEntityId", IsForeignKey=true, IsUnique=true)]
		public BusinessEntity BusinessEntity
		{
			get { return _businessEntity.Entity; }
			set
			{
				BusinessEntity previousValue = _businessEntity.Entity;
				if((previousValue != value) || (_businessEntity.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("BusinessEntity");
					if(previousValue != null)
					{
						_businessEntity.Entity = null;
						previousValue.Person=null;
					}
					_businessEntity.Entity = value;
					if(value==null)
					{
						_businessEntityId = default(System.Int32);
					}
					else
					{
						value.Person = this;
						_businessEntityId = value.BusinessEntityId;
					}
					this.SendPropertyChanged("BusinessEntity");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'BusinessEntityContact.Person - Person.BusinessEntityContacts (m:1)'</summary>
		[Association(Name="BusinessEntityContact_Personf81c089467ff45ab81dafb455497a611", Storage="_businessEntityContacts", OtherKey="PersonId")]
		public EntitySet<BusinessEntityContact> BusinessEntityContacts
		{
			get { return this._businessEntityContacts; }
			set { this._businessEntityContacts.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Customer.Person - Person.Customers (m:1)'</summary>
		[Association(Name="Customer_Persona7aebeb94d794c53ae3e1cf1edcd48a3", Storage="_customers", OtherKey="PersonId")]
		public EntitySet<Customer> Customers
		{
			get { return this._customers; }
			set { this._customers.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'EmailAddress.Person - Person.EmailAddresses (m:1)'</summary>
		[Association(Name="EmailAddress_Person359d8694c6ab47c5ad6f560a56830e6a", Storage="_emailAddresses", OtherKey="BusinessEntityId")]
		public EntitySet<EmailAddress> EmailAddresses
		{
			get { return this._emailAddresses; }
			set { this._emailAddresses.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Employee.Person - Person.Employee (1:1)'</summary>
		[Association(Name="Employee_Person607045aa64b14bf6a8c7f47f785fbb1d", Storage="_employee", OtherKey="BusinessEntityId", IsForeignKey=false, IsUnique=true)]
		public Employee Employee
		{
			get { return _employee.Entity; }
			set
			{
				Employee previousValue = _employee.Entity;
				if((previousValue != value) || (_employee.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Employee");
					if(previousValue != null)
					{
						_employee.Entity = null;
						previousValue.Person=null;
					}
					_employee.Entity = value;
					if(value != null)
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Password.Person - Person.Password (1:1)'</summary>
		[Association(Name="Password_Person3640f13b260a4ce1b893c75a26f57dd3", Storage="_password", OtherKey="BusinessEntityId", IsForeignKey=false, IsUnique=true)]
		public Password Password
		{
			get { return _password.Entity; }
			set
			{
				Password previousValue = _password.Entity;
				if((previousValue != value) || (_password.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Password");
					if(previousValue != null)
					{
						_password.Entity = null;
						previousValue.Person=null;
					}
					_password.Entity = value;
					if(value != null)
					{
						value.Person = this;
					}
					this.SendPropertyChanged("Password");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'PersonCreditCard.Person - Person.PersonCreditCards (m:1)'</summary>
		[Association(Name="PersonCreditCard_Person006289ec0d8940c69bce074ca789e2c5", Storage="_personCreditCards", OtherKey="BusinessEntityId")]
		public EntitySet<PersonCreditCard> PersonCreditCards
		{
			get { return this._personCreditCards; }
			set { this._personCreditCards.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'PersonPhone.Person - Person.PersonPhones (m:1)'</summary>
		[Association(Name="PersonPhone_Persona4e549025a364ca6b038c7d202c04f1b", Storage="_personPhones", OtherKey="BusinessEntityId")]
		public EntitySet<PersonPhone> PersonPhones
		{
			get { return this._personPhones; }
			set { this._personPhones.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649