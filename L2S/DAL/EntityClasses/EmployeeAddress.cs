#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'EmployeeAddress', mapped on table 'AdventureWorks.HumanResources.EmployeeAddress'.</summary>
	[Table(Name="[HumanResources].[EmployeeAddress]")]
	public partial class EmployeeAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_addressId;
		private System.Int32	_employeeId;
		private System.DateTime	_modifiedDate;
		private System.Guid	_rowguid;
		private EntityRef <Address> _address;
		private EntityRef <Employee> _employee;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAddressIdChanging(System.Int32 value);
		partial void OnAddressIdChanged();
		partial void OnEmployeeIdChanging(System.Int32 value);
		partial void OnEmployeeIdChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="EmployeeAddress"/> class.</summary>
		public EmployeeAddress()
		{
			_address = default(EntityRef<Address>);
			_employee = default(EntityRef<Employee>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the AddressId field. Mapped on target field 'AddressID'. </summary>
		[Column(Name="AddressID", Storage="_addressId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 AddressId
		{
			get	{ return _addressId; }
			set
			{
				if((_addressId != value))
				{
					if(_address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnAddressIdChanging(value);
					SendPropertyChanging("AddressId");
					_addressId = value;
					SendPropertyChanged("AddressId");
					OnAddressIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the EmployeeId field. Mapped on target field 'EmployeeID'. </summary>
		[Column(Name="EmployeeID", Storage="_employeeId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 EmployeeId
		{
			get	{ return _employeeId; }
			set
			{
				if((_employeeId != value))
				{
					if(_employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnEmployeeIdChanging(value);
					SendPropertyChanging("EmployeeId");
					_employeeId = value;
					SendPropertyChanged("EmployeeId");
					OnEmployeeIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'EmployeeAddress.Address - Address.EmployeeAddresses (m:1)'</summary>
		[Association(Name="EmployeeAddress_Addressbd22e8ef8a93482abf983ea0b84276bd", Storage="_address", ThisKey="AddressId", IsForeignKey=true)] 
		public Address Address
		{
			get { return _address.Entity; }
			set
			{
				Address previousValue = _address.Entity;
				if((previousValue != value) || (_address.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Address");
					if(previousValue != null)
					{
						_address.Entity = null;
						previousValue.EmployeeAddresses.Remove(this);
					}
					_address.Entity = value;
					if(value == null)
					{
						_addressId = default(System.Int32);
					}
					else
					{
						value.EmployeeAddresses.Add(this);
						_addressId = value.AddressId;
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'EmployeeAddress.Employee - Employee.EmployeeAddresses (m:1)'</summary>
		[Association(Name="EmployeeAddress_Employeeecd3ad59e3554f40b88af37752dfed59", Storage="_employee", ThisKey="EmployeeId", IsForeignKey=true)] 
		public Employee Employee
		{
			get { return _employee.Entity; }
			set
			{
				Employee previousValue = _employee.Entity;
				if((previousValue != value) || (_employee.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Employee");
					if(previousValue != null)
					{
						_employee.Entity = null;
						previousValue.EmployeeAddresses.Remove(this);
					}
					_employee.Entity = value;
					if(value == null)
					{
						_employeeId = default(System.Int32);
					}
					else
					{
						value.EmployeeAddresses.Add(this);
						_employeeId = value.EmployeeId;
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649