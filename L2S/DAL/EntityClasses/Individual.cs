#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'Individual', mapped on table 'AdventureWorks.Sales.Individual'.</summary>
	[Table(Name="[Sales].[Individual]")]
	public partial class Individual : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_contactId;
		private System.Int32	_customerId;
		private System.String	_demographics;
		private System.DateTime	_modifiedDate;
		private EntityRef <Contact> _contact;
		private EntityRef <Customer> _customer;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnContactIdChanging(System.Int32 value);
		partial void OnContactIdChanged();
		partial void OnCustomerIdChanging(System.Int32 value);
		partial void OnCustomerIdChanged();
		partial void OnDemographicsChanging(System.String value);
		partial void OnDemographicsChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Individual"/> class.</summary>
		public Individual()
		{
			_contact = default(EntityRef<Contact>);
			_customer = default(EntityRef<Customer>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the ContactId field. Mapped on target field 'ContactID'. </summary>
		[Column(Name="ContactID", Storage="_contactId", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 ContactId
		{
			get	{ return _contactId; }
			set
			{
				if((_contactId != value))
				{
					if(_contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnContactIdChanging(value);
					SendPropertyChanging("ContactId");
					_contactId = value;
					SendPropertyChanged("ContactId");
					OnContactIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the CustomerId field. Mapped on target field 'CustomerID'. </summary>
		[Column(Name="CustomerID", Storage="_customerId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 CustomerId
		{
			get	{ return _customerId; }
			set
			{
				if((_customerId != value))
				{
					if(_customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnCustomerIdChanging(value);
					SendPropertyChanging("CustomerId");
					_customerId = value;
					SendPropertyChanged("CustomerId");
					OnCustomerIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the Demographics field. Mapped on target field 'Demographics'. </summary>
		[Column(Name="Demographics", Storage="_demographics", DbType="xml NULL", UpdateCheck=UpdateCheck.Never)]
		public System.String Demographics
		{
			get	{ return _demographics; }
			set
			{
				if((_demographics != value))
				{
					OnDemographicsChanging(value);
					SendPropertyChanging("Demographics");
					_demographics = value;
					SendPropertyChanged("Demographics");
					OnDemographicsChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'Individual.Contact - Contact.Individuals (m:1)'</summary>
		[Association(Name="Individual_Contacte6736a6f33be4376a7c48e2845f7eddd", Storage="_contact", ThisKey="ContactId", IsForeignKey=true)] 
		public Contact Contact
		{
			get { return _contact.Entity; }
			set
			{
				Contact previousValue = _contact.Entity;
				if((previousValue != value) || (_contact.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Contact");
					if(previousValue != null)
					{
						_contact.Entity = null;
						previousValue.Individuals.Remove(this);
					}
					_contact.Entity = value;
					if(value == null)
					{
						_contactId = default(System.Int32);
					}
					else
					{
						value.Individuals.Add(this);
						_contactId = value.ContactId;
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Individual.Customer - Customer.Individual (1:1)'</summary>
		[Association(Name="Individual_Customer6111b50de9ed46cab93f164e976bbb45", Storage="_customer", ThisKey="CustomerId", IsForeignKey=true, IsUnique=true)]
		public Customer Customer
		{
			get { return _customer.Entity; }
			set
			{
				Customer previousValue = _customer.Entity;
				if((previousValue != value) || (_customer.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Customer");
					if(previousValue != null)
					{
						_customer.Entity = null;
						previousValue.Individual=null;
					}
					_customer.Entity = value;
					if(value==null)
					{
						_customerId = default(System.Int32);
					}
					else
					{
						value.Individual = this;
						_customerId = value.CustomerId;
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649