#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'SalesOrderHeaderSalesReason', mapped on table 'AdventureWorks.Sales.SalesOrderHeaderSalesReason'.</summary>
	[Table(Name="[Sales].[SalesOrderHeaderSalesReason]")]
	public partial class SalesOrderHeaderSalesReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.DateTime	_modifiedDate;
		private System.Int32	_salesOrderId;
		private System.Int32	_salesReasonId;
		private EntityRef <SalesOrderHeader> _salesOrderHeader;
		private EntityRef <SalesReason> _salesReason;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnSalesOrderIdChanging(System.Int32 value);
		partial void OnSalesOrderIdChanged();
		partial void OnSalesReasonIdChanging(System.Int32 value);
		partial void OnSalesReasonIdChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="SalesOrderHeaderSalesReason"/> class.</summary>
		public SalesOrderHeaderSalesReason()
		{
			_salesOrderHeader = default(EntityRef<SalesOrderHeader>);
			_salesReason = default(EntityRef<SalesReason>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesOrderId field. Mapped on target field 'SalesOrderID'. </summary>
		[Column(Name="SalesOrderID", Storage="_salesOrderId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 SalesOrderId
		{
			get	{ return _salesOrderId; }
			set
			{
				if((_salesOrderId != value))
				{
					if(_salesOrderHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnSalesOrderIdChanging(value);
					SendPropertyChanging("SalesOrderId");
					_salesOrderId = value;
					SendPropertyChanged("SalesOrderId");
					OnSalesOrderIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesReasonId field. Mapped on target field 'SalesReasonID'. </summary>
		[Column(Name="SalesReasonID", Storage="_salesReasonId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 SalesReasonId
		{
			get	{ return _salesReasonId; }
			set
			{
				if((_salesReasonId != value))
				{
					if(_salesReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnSalesReasonIdChanging(value);
					SendPropertyChanging("SalesReasonId");
					_salesReasonId = value;
					SendPropertyChanged("SalesReasonId");
					OnSalesReasonIdChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeaderSalesReason.SalesOrderHeader - SalesOrderHeader.SalesOrderHeaderSalesReasons (m:1)'</summary>
		[Association(Name="SalesOrderHeaderSalesReason_SalesOrderHeader68f26056cadd4176ae24242152d55625", Storage="_salesOrderHeader", ThisKey="SalesOrderId", IsForeignKey=true)] 
		public SalesOrderHeader SalesOrderHeader
		{
			get { return _salesOrderHeader.Entity; }
			set
			{
				SalesOrderHeader previousValue = _salesOrderHeader.Entity;
				if((previousValue != value) || (_salesOrderHeader.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SalesOrderHeader");
					if(previousValue != null)
					{
						_salesOrderHeader.Entity = null;
						previousValue.SalesOrderHeaderSalesReasons.Remove(this);
					}
					_salesOrderHeader.Entity = value;
					if(value == null)
					{
						_salesOrderId = default(System.Int32);
					}
					else
					{
						value.SalesOrderHeaderSalesReasons.Add(this);
						_salesOrderId = value.SalesOrderId;
					}
					this.SendPropertyChanged("SalesOrderHeader");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeaderSalesReason.SalesReason - SalesReason.SalesOrderHeaderSalesReasons (m:1)'</summary>
		[Association(Name="SalesOrderHeaderSalesReason_SalesReason298ca9bcdde743c092c8f4b03bbe1ec8", Storage="_salesReason", ThisKey="SalesReasonId", IsForeignKey=true)] 
		public SalesReason SalesReason
		{
			get { return _salesReason.Entity; }
			set
			{
				SalesReason previousValue = _salesReason.Entity;
				if((previousValue != value) || (_salesReason.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SalesReason");
					if(previousValue != null)
					{
						_salesReason.Entity = null;
						previousValue.SalesOrderHeaderSalesReasons.Remove(this);
					}
					_salesReason.Entity = value;
					if(value == null)
					{
						_salesReasonId = default(System.Int32);
					}
					else
					{
						value.SalesOrderHeaderSalesReasons.Add(this);
						_salesReasonId = value.SalesReasonId;
					}
					this.SendPropertyChanged("SalesReason");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649