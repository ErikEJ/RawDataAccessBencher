#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'SalesPersonQuotaHistory', mapped on table 'AdventureWorks.Sales.SalesPersonQuotaHistory'.</summary>
	[Table(Name="[Sales].[SalesPersonQuotaHistory]")]
	public partial class SalesPersonQuotaHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_businessEntityId;
		private System.DateTime	_modifiedDate;
		private System.DateTime	_quotaDate;
		private System.Guid	_rowguid;
		private System.Decimal	_salesQuota;
		private EntityRef <SalesPerson> _salesPerson;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBusinessEntityIdChanging(System.Int32 value);
		partial void OnBusinessEntityIdChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnQuotaDateChanging(System.DateTime value);
		partial void OnQuotaDateChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSalesQuotaChanging(System.Decimal value);
		partial void OnSalesQuotaChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="SalesPersonQuotaHistory"/> class.</summary>
		public SalesPersonQuotaHistory()
		{
			_salesPerson = default(EntityRef<SalesPerson>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the BusinessEntityId field. Mapped on target field 'BusinessEntityID'. </summary>
		[Column(Name="BusinessEntityID", Storage="_businessEntityId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 BusinessEntityId
		{
			get	{ return _businessEntityId; }
			set
			{
				if((_businessEntityId != value))
				{
					if(_salesPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnBusinessEntityIdChanging(value);
					SendPropertyChanging("BusinessEntityId");
					_businessEntityId = value;
					SendPropertyChanged("BusinessEntityId");
					OnBusinessEntityIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the QuotaDate field. Mapped on target field 'QuotaDate'. </summary>
		[Column(Name="QuotaDate", Storage="_quotaDate", CanBeNull=false, DbType="datetime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime QuotaDate
		{
			get	{ return _quotaDate; }
			set
			{
				if((_quotaDate != value))
				{
					OnQuotaDateChanging(value);
					SendPropertyChanging("QuotaDate");
					_quotaDate = value;
					SendPropertyChanged("QuotaDate");
					OnQuotaDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesQuota field. Mapped on target field 'SalesQuota'. </summary>
		[Column(Name="SalesQuota", Storage="_salesQuota", CanBeNull=false, DbType="money NOT NULL")]
		public System.Decimal SalesQuota
		{
			get	{ return _salesQuota; }
			set
			{
				if((_salesQuota != value))
				{
					OnSalesQuotaChanging(value);
					SendPropertyChanging("SalesQuota");
					_salesQuota = value;
					SendPropertyChanged("SalesQuota");
					OnSalesQuotaChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'SalesPersonQuotaHistory.SalesPerson - SalesPerson.SalesPersonQuotaHistories (m:1)'</summary>
		[Association(Name="SalesPersonQuotaHistory_SalesPersonf0ec214666cb4b8096c6d793afe6c1ba", Storage="_salesPerson", ThisKey="BusinessEntityId", IsForeignKey=true)] 
		public SalesPerson SalesPerson
		{
			get { return _salesPerson.Entity; }
			set
			{
				SalesPerson previousValue = _salesPerson.Entity;
				if((previousValue != value) || (_salesPerson.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SalesPerson");
					if(previousValue != null)
					{
						_salesPerson.Entity = null;
						previousValue.SalesPersonQuotaHistories.Remove(this);
					}
					_salesPerson.Entity = value;
					if(value == null)
					{
						_businessEntityId = default(System.Int32);
					}
					else
					{
						value.SalesPersonQuotaHistories.Add(this);
						_businessEntityId = value.BusinessEntityId;
					}
					this.SendPropertyChanged("SalesPerson");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649