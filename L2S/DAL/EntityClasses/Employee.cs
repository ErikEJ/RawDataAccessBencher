#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'Employee', mapped on table 'AdventureWorks.HumanResources.Employee'.</summary>
	[Table(Name="[HumanResources].[Employee]")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.DateTime	_birthDate;
		private System.Int32	_contactId;
		private System.Boolean	_currentFlag;
		private System.Int32	_employeeId;
		private System.String	_gender;
		private System.DateTime	_hireDate;
		private System.String	_loginId;
		private Nullable<System.Int32>	_managerId;
		private System.String	_maritalStatus;
		private System.DateTime	_modifiedDate;
		private System.String	_nationalIdnumber;
		private System.Guid	_rowguid;
		private System.Boolean	_salariedFlag;
		private System.Int16	_sickLeaveHours;
		private System.String	_title;
		private System.Int16	_vacationHours;
		private EntityRef <Contact> _contact;
		private EntityRef <Employee> _manager;
		private EntitySet <Employee> _employees;
		private EntitySet <EmployeeAddress> _employeeAddresses;
		private EntitySet <EmployeeDepartmentHistory> _employeeDepartmentHistories;
		private EntitySet <EmployeePayHistory> _employeePayHistories;
		private EntitySet <JobCandidate> _jobCandidates;
		private EntitySet <PurchaseOrderHeader> _purchaseOrderHeaders;
		private EntityRef <SalesPerson> _salesPerson;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBirthDateChanging(System.DateTime value);
		partial void OnBirthDateChanged();
		partial void OnContactIdChanging(System.Int32 value);
		partial void OnContactIdChanged();
		partial void OnCurrentFlagChanging(System.Boolean value);
		partial void OnCurrentFlagChanged();
		partial void OnEmployeeIdChanging(System.Int32 value);
		partial void OnEmployeeIdChanged();
		partial void OnGenderChanging(System.String value);
		partial void OnGenderChanged();
		partial void OnHireDateChanging(System.DateTime value);
		partial void OnHireDateChanged();
		partial void OnLoginIdChanging(System.String value);
		partial void OnLoginIdChanged();
		partial void OnManagerIdChanging(Nullable<System.Int32> value);
		partial void OnManagerIdChanged();
		partial void OnMaritalStatusChanging(System.String value);
		partial void OnMaritalStatusChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNationalIdnumberChanging(System.String value);
		partial void OnNationalIdnumberChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSalariedFlagChanging(System.Boolean value);
		partial void OnSalariedFlagChanged();
		partial void OnSickLeaveHoursChanging(System.Int16 value);
		partial void OnSickLeaveHoursChanged();
		partial void OnTitleChanging(System.String value);
		partial void OnTitleChanged();
		partial void OnVacationHoursChanging(System.Int16 value);
		partial void OnVacationHoursChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Employee"/> class.</summary>
		public Employee()
		{
			_contact = default(EntityRef<Contact>);
			_manager = default(EntityRef<Employee>);
			_employees = new EntitySet<Employee>(new Action<Employee>(this.Attach_Employees), new Action<Employee>(this.Detach_Employees) );
			_employeeAddresses = new EntitySet<EmployeeAddress>(new Action<EmployeeAddress>(this.Attach_EmployeeAddresses), new Action<EmployeeAddress>(this.Detach_EmployeeAddresses) );
			_employeeDepartmentHistories = new EntitySet<EmployeeDepartmentHistory>(new Action<EmployeeDepartmentHistory>(this.Attach_EmployeeDepartmentHistories), new Action<EmployeeDepartmentHistory>(this.Detach_EmployeeDepartmentHistories) );
			_employeePayHistories = new EntitySet<EmployeePayHistory>(new Action<EmployeePayHistory>(this.Attach_EmployeePayHistories), new Action<EmployeePayHistory>(this.Detach_EmployeePayHistories) );
			_jobCandidates = new EntitySet<JobCandidate>(new Action<JobCandidate>(this.Attach_JobCandidates), new Action<JobCandidate>(this.Detach_JobCandidates) );
			_purchaseOrderHeaders = new EntitySet<PurchaseOrderHeader>(new Action<PurchaseOrderHeader>(this.Attach_PurchaseOrderHeaders), new Action<PurchaseOrderHeader>(this.Detach_PurchaseOrderHeaders) );
			_salesPerson = default(EntityRef<SalesPerson>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_Employees(Employee entity)
		{
			this.SendPropertyChanging("Employees");
			entity.Manager = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_Employees(Employee entity)
		{
			this.SendPropertyChanging("Employees");
			entity.Manager = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_EmployeeAddresses(EmployeeAddress entity)
		{
			this.SendPropertyChanging("EmployeeAddresses");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_EmployeeAddresses(EmployeeAddress entity)
		{
			this.SendPropertyChanging("EmployeeAddresses");
			entity.Employee = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging("EmployeeDepartmentHistories");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_EmployeeDepartmentHistories(EmployeeDepartmentHistory entity)
		{
			this.SendPropertyChanging("EmployeeDepartmentHistories");
			entity.Employee = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_EmployeePayHistories(EmployeePayHistory entity)
		{
			this.SendPropertyChanging("EmployeePayHistories");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_EmployeePayHistories(EmployeePayHistory entity)
		{
			this.SendPropertyChanging("EmployeePayHistories");
			entity.Employee = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging("JobCandidates");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_JobCandidates(JobCandidate entity)
		{
			this.SendPropertyChanging("JobCandidates");
			entity.Employee = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_PurchaseOrderHeaders(PurchaseOrderHeader entity)
		{
			this.SendPropertyChanging("PurchaseOrderHeaders");
			entity.Employee = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_PurchaseOrderHeaders(PurchaseOrderHeader entity)
		{
			this.SendPropertyChanging("PurchaseOrderHeaders");
			entity.Employee = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the BirthDate field. Mapped on target field 'BirthDate'. </summary>
		[Column(Name="BirthDate", Storage="_birthDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime BirthDate
		{
			get	{ return _birthDate; }
			set
			{
				if((_birthDate != value))
				{
					OnBirthDateChanging(value);
					SendPropertyChanging("BirthDate");
					_birthDate = value;
					SendPropertyChanged("BirthDate");
					OnBirthDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the ContactId field. Mapped on target field 'ContactID'. </summary>
		[Column(Name="ContactID", Storage="_contactId", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 ContactId
		{
			get	{ return _contactId; }
			set
			{
				if((_contactId != value))
				{
					if(_contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnContactIdChanging(value);
					SendPropertyChanging("ContactId");
					_contactId = value;
					SendPropertyChanged("ContactId");
					OnContactIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the CurrentFlag field. Mapped on target field 'CurrentFlag'. </summary>
		[Column(Name="CurrentFlag", Storage="_currentFlag", CanBeNull=false, DbType="bit NOT NULL")]
		public System.Boolean CurrentFlag
		{
			get	{ return _currentFlag; }
			set
			{
				if((_currentFlag != value))
				{
					OnCurrentFlagChanging(value);
					SendPropertyChanging("CurrentFlag");
					_currentFlag = value;
					SendPropertyChanged("CurrentFlag");
					OnCurrentFlagChanged();
				}
			}
		}

		/// <summary>Gets or sets the EmployeeId field. Mapped on target field 'EmployeeID'. </summary>
		[Column(Name="EmployeeID", Storage="_employeeId", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Int32 EmployeeId
		{
			get	{ return _employeeId; }
			set
			{
				if((_employeeId != value))
				{
					OnEmployeeIdChanging(value);
					SendPropertyChanging("EmployeeId");
					_employeeId = value;
					SendPropertyChanged("EmployeeId");
					OnEmployeeIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the Gender field. Mapped on target field 'Gender'. </summary>
		[Column(Name="Gender", Storage="_gender", CanBeNull=false, DbType="nchar(1) NOT NULL")]
		public System.String Gender
		{
			get	{ return _gender; }
			set
			{
				if((_gender != value))
				{
					OnGenderChanging(value);
					SendPropertyChanging("Gender");
					_gender = value;
					SendPropertyChanged("Gender");
					OnGenderChanged();
				}
			}
		}

		/// <summary>Gets or sets the HireDate field. Mapped on target field 'HireDate'. </summary>
		[Column(Name="HireDate", Storage="_hireDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime HireDate
		{
			get	{ return _hireDate; }
			set
			{
				if((_hireDate != value))
				{
					OnHireDateChanging(value);
					SendPropertyChanging("HireDate");
					_hireDate = value;
					SendPropertyChanged("HireDate");
					OnHireDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the LoginId field. Mapped on target field 'LoginID'. </summary>
		[Column(Name="LoginID", Storage="_loginId", CanBeNull=false, DbType="nvarchar(256) NOT NULL")]
		public System.String LoginId
		{
			get	{ return _loginId; }
			set
			{
				if((_loginId != value))
				{
					OnLoginIdChanging(value);
					SendPropertyChanging("LoginId");
					_loginId = value;
					SendPropertyChanged("LoginId");
					OnLoginIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ManagerId field. Mapped on target field 'ManagerID'. </summary>
		[Column(Name="ManagerID", Storage="_managerId", DbType="int NULL")]
		public Nullable<System.Int32> ManagerId
		{
			get	{ return _managerId; }
			set
			{
				if((_managerId != value))
				{
					if(_manager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					if(_manager.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnManagerIdChanging(value);
					SendPropertyChanging("ManagerId");
					_managerId = value;
					SendPropertyChanged("ManagerId");
					OnManagerIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the MaritalStatus field. Mapped on target field 'MaritalStatus'. </summary>
		[Column(Name="MaritalStatus", Storage="_maritalStatus", CanBeNull=false, DbType="nchar(1) NOT NULL")]
		public System.String MaritalStatus
		{
			get	{ return _maritalStatus; }
			set
			{
				if((_maritalStatus != value))
				{
					OnMaritalStatusChanging(value);
					SendPropertyChanging("MaritalStatus");
					_maritalStatus = value;
					SendPropertyChanged("MaritalStatus");
					OnMaritalStatusChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the NationalIdnumber field. Mapped on target field 'NationalIDNumber'. </summary>
		[Column(Name="NationalIDNumber", Storage="_nationalIdnumber", CanBeNull=false, DbType="nvarchar(15) NOT NULL")]
		public System.String NationalIdnumber
		{
			get	{ return _nationalIdnumber; }
			set
			{
				if((_nationalIdnumber != value))
				{
					OnNationalIdnumberChanging(value);
					SendPropertyChanging("NationalIdnumber");
					_nationalIdnumber = value;
					SendPropertyChanged("NationalIdnumber");
					OnNationalIdnumberChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalariedFlag field. Mapped on target field 'SalariedFlag'. </summary>
		[Column(Name="SalariedFlag", Storage="_salariedFlag", CanBeNull=false, DbType="bit NOT NULL")]
		public System.Boolean SalariedFlag
		{
			get	{ return _salariedFlag; }
			set
			{
				if((_salariedFlag != value))
				{
					OnSalariedFlagChanging(value);
					SendPropertyChanging("SalariedFlag");
					_salariedFlag = value;
					SendPropertyChanged("SalariedFlag");
					OnSalariedFlagChanged();
				}
			}
		}

		/// <summary>Gets or sets the SickLeaveHours field. Mapped on target field 'SickLeaveHours'. </summary>
		[Column(Name="SickLeaveHours", Storage="_sickLeaveHours", CanBeNull=false, DbType="smallint NOT NULL")]
		public System.Int16 SickLeaveHours
		{
			get	{ return _sickLeaveHours; }
			set
			{
				if((_sickLeaveHours != value))
				{
					OnSickLeaveHoursChanging(value);
					SendPropertyChanging("SickLeaveHours");
					_sickLeaveHours = value;
					SendPropertyChanged("SickLeaveHours");
					OnSickLeaveHoursChanged();
				}
			}
		}

		/// <summary>Gets or sets the Title field. Mapped on target field 'Title'. </summary>
		[Column(Name="Title", Storage="_title", CanBeNull=false, DbType="nvarchar(50) NOT NULL")]
		public System.String Title
		{
			get	{ return _title; }
			set
			{
				if((_title != value))
				{
					OnTitleChanging(value);
					SendPropertyChanging("Title");
					_title = value;
					SendPropertyChanged("Title");
					OnTitleChanged();
				}
			}
		}

		/// <summary>Gets or sets the VacationHours field. Mapped on target field 'VacationHours'. </summary>
		[Column(Name="VacationHours", Storage="_vacationHours", CanBeNull=false, DbType="smallint NOT NULL")]
		public System.Int16 VacationHours
		{
			get	{ return _vacationHours; }
			set
			{
				if((_vacationHours != value))
				{
					OnVacationHoursChanging(value);
					SendPropertyChanging("VacationHours");
					_vacationHours = value;
					SendPropertyChanged("VacationHours");
					OnVacationHoursChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'Employee.Contact - Contact.Employees (m:1)'</summary>
		[Association(Name="Employee_Contactb361864d558c44d8a18d902bb1927645", Storage="_contact", ThisKey="ContactId", IsForeignKey=true)] 
		public Contact Contact
		{
			get { return _contact.Entity; }
			set
			{
				Contact previousValue = _contact.Entity;
				if((previousValue != value) || (_contact.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Contact");
					if(previousValue != null)
					{
						_contact.Entity = null;
						previousValue.Employees.Remove(this);
					}
					_contact.Entity = value;
					if(value == null)
					{
						_contactId = default(System.Int32);
					}
					else
					{
						value.Employees.Add(this);
						_contactId = value.ContactId;
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Employee.Manager - Employee.Employees (m:1)'</summary>
		[Association(Name="Employee_Employee098b62caacae4965bc50695e049da7c2", Storage="_manager", ThisKey="ManagerId", IsForeignKey=true)] 
		public Employee Manager
		{
			get { return _manager.Entity; }
			set
			{
				Employee previousValue = _manager.Entity;
				if((previousValue != value) || (_manager.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Manager");
					if(previousValue != null)
					{
						_manager.Entity = null;
						previousValue.Employees.Remove(this);
					}
					_manager.Entity = value;
					if(value == null)
					{
						_managerId = default(Nullable<System.Int32>);
					}
					else
					{
						value.Employees.Add(this);
						_managerId = value.EmployeeId;
					}
					this.SendPropertyChanged("Manager");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Employee.Manager - Employee.Employees (m:1)'</summary>
		[Association(Name="Employee_Employee098b62caacae4965bc50695e049da7c2", Storage="_employees", OtherKey="ManagerId")]
		public EntitySet<Employee> Employees
		{
			get { return this._employees; }
			set { this._employees.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'EmployeeAddress.Employee - Employee.EmployeeAddresses (m:1)'</summary>
		[Association(Name="EmployeeAddress_Employeeecd3ad59e3554f40b88af37752dfed59", Storage="_employeeAddresses", OtherKey="EmployeeId")]
		public EntitySet<EmployeeAddress> EmployeeAddresses
		{
			get { return this._employeeAddresses; }
			set { this._employeeAddresses.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'EmployeeDepartmentHistory.Employee - Employee.EmployeeDepartmentHistories (m:1)'</summary>
		[Association(Name="EmployeeDepartmentHistory_Employeed00739cbcdf24b1392b159504b57ec34", Storage="_employeeDepartmentHistories", OtherKey="EmployeeId")]
		public EntitySet<EmployeeDepartmentHistory> EmployeeDepartmentHistories
		{
			get { return this._employeeDepartmentHistories; }
			set { this._employeeDepartmentHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'EmployeePayHistory.Employee - Employee.EmployeePayHistories (m:1)'</summary>
		[Association(Name="EmployeePayHistory_Employeef470928384fa447d96250b4dd34a757f", Storage="_employeePayHistories", OtherKey="EmployeeId")]
		public EntitySet<EmployeePayHistory> EmployeePayHistories
		{
			get { return this._employeePayHistories; }
			set { this._employeePayHistories.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'JobCandidate.Employee - Employee.JobCandidates (m:1)'</summary>
		[Association(Name="JobCandidate_Employee91809a205c6547bebcdcd7b7cd5d5cc9", Storage="_jobCandidates", OtherKey="EmployeeId")]
		public EntitySet<JobCandidate> JobCandidates
		{
			get { return this._jobCandidates; }
			set { this._jobCandidates.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'PurchaseOrderHeader.Employee - Employee.PurchaseOrderHeaders (m:1)'</summary>
		[Association(Name="PurchaseOrderHeader_Employee124ba68ba340461aa86fcd2f3485dba8", Storage="_purchaseOrderHeaders", OtherKey="EmployeeId")]
		public EntitySet<PurchaseOrderHeader> PurchaseOrderHeaders
		{
			get { return this._purchaseOrderHeaders; }
			set { this._purchaseOrderHeaders.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesPerson.Employee - Employee.SalesPerson (1:1)'</summary>
		[Association(Name="SalesPerson_Employee9dd86acd996e41af974a98d04cc724d7", Storage="_salesPerson", OtherKey="SalesPersonId", IsForeignKey=false, IsUnique=true)]
		public SalesPerson SalesPerson
		{
			get { return _salesPerson.Entity; }
			set
			{
				SalesPerson previousValue = _salesPerson.Entity;
				if((previousValue != value) || (_salesPerson.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SalesPerson");
					if(previousValue != null)
					{
						_salesPerson.Entity = null;
						previousValue.Employee=null;
					}
					_salesPerson.Entity = value;
					if(value != null)
					{
						value.Employee = this;
					}
					this.SendPropertyChanged("SalesPerson");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649