#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'UnitMeasure', mapped on table 'AdventureWorks.Production.UnitMeasure'.</summary>
	[Table(Name="[Production].[UnitMeasure]")]
	public partial class UnitMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.DateTime	_modifiedDate;
		private System.String	_name;
		private System.String	_unitMeasureCode;
		private EntitySet <BillOfMaterial> _billOfMaterials;
		private EntitySet <Product> _products;
		private EntitySet <Product> _products1;
		private EntitySet <ProductVendor> _productVendors;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnNameChanging(System.String value);
		partial void OnNameChanged();
		partial void OnUnitMeasureCodeChanging(System.String value);
		partial void OnUnitMeasureCodeChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="UnitMeasure"/> class.</summary>
		public UnitMeasure()
		{
			_billOfMaterials = new EntitySet<BillOfMaterial>(new Action<BillOfMaterial>(this.Attach_BillOfMaterials), new Action<BillOfMaterial>(this.Detach_BillOfMaterials) );
			_products = new EntitySet<Product>(new Action<Product>(this.Attach_Products), new Action<Product>(this.Detach_Products) );
			_products1 = new EntitySet<Product>(new Action<Product>(this.Attach_Products1), new Action<Product>(this.Detach_Products1) );
			_productVendors = new EntitySet<ProductVendor>(new Action<ProductVendor>(this.Attach_ProductVendors), new Action<ProductVendor>(this.Detach_ProductVendors) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_BillOfMaterials(BillOfMaterial entity)
		{
			this.SendPropertyChanging("BillOfMaterials");
			entity.UnitMeasure = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_BillOfMaterials(BillOfMaterial entity)
		{
			this.SendPropertyChanging("BillOfMaterials");
			entity.UnitMeasure = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_Products(Product entity)
		{
			this.SendPropertyChanging("Products");
			entity.UnitMeasure = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_Products(Product entity)
		{
			this.SendPropertyChanging("Products");
			entity.UnitMeasure = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_Products1(Product entity)
		{
			this.SendPropertyChanging("Products1");
			entity.UnitMeasure1 = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_Products1(Product entity)
		{
			this.SendPropertyChanging("Products1");
			entity.UnitMeasure1 = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductVendors(ProductVendor entity)
		{
			this.SendPropertyChanging("ProductVendors");
			entity.UnitMeasure = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductVendors(ProductVendor entity)
		{
			this.SendPropertyChanging("ProductVendors");
			entity.UnitMeasure = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Name field. Mapped on target field 'Name'. </summary>
		[Column(Name="Name", Storage="_name", CanBeNull=false, DbType="nvarchar(50) NOT NULL")]
		public System.String Name
		{
			get	{ return _name; }
			set
			{
				if((_name != value))
				{
					OnNameChanging(value);
					SendPropertyChanging("Name");
					_name = value;
					SendPropertyChanged("Name");
					OnNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the UnitMeasureCode field. Mapped on target field 'UnitMeasureCode'. </summary>
		[Column(Name="UnitMeasureCode", Storage="_unitMeasureCode", CanBeNull=false, DbType="nchar(3) NOT NULL", IsPrimaryKey=true)]
		public System.String UnitMeasureCode
		{
			get	{ return _unitMeasureCode; }
			set
			{
				if((_unitMeasureCode != value))
				{
					OnUnitMeasureCodeChanging(value);
					SendPropertyChanging("UnitMeasureCode");
					_unitMeasureCode = value;
					SendPropertyChanged("UnitMeasureCode");
					OnUnitMeasureCodeChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'BillOfMaterial.UnitMeasure - UnitMeasure.BillOfMaterials (m:1)'</summary>
		[Association(Name="BillOfMaterial_UnitMeasure44a83cef990d418ab69cce9d5be522ae", Storage="_billOfMaterials", OtherKey="UnitMeasureCode")]
		public EntitySet<BillOfMaterial> BillOfMaterials
		{
			get { return this._billOfMaterials; }
			set { this._billOfMaterials.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Product.UnitMeasure - UnitMeasure.Products (m:1)'</summary>
		[Association(Name="Product_UnitMeasureddb34a32292a40988bc56c6b01a66c16", Storage="_products", OtherKey="SizeUnitMeasureCode")]
		public EntitySet<Product> Products
		{
			get { return this._products; }
			set { this._products.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'Product.UnitMeasure1 - UnitMeasure.Products1 (m:1)'</summary>
		[Association(Name="Product_UnitMeasurea31888b0eba449acbd8f39681e96a5ff", Storage="_products1", OtherKey="WeightUnitMeasureCode")]
		public EntitySet<Product> Products1
		{
			get { return this._products1; }
			set { this._products1.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'ProductVendor.UnitMeasure - UnitMeasure.ProductVendors (m:1)'</summary>
		[Association(Name="ProductVendor_UnitMeasurece4b3e6c67de4291b5c1b129dcb0edbe", Storage="_productVendors", OtherKey="UnitMeasureCode")]
		public EntitySet<ProductVendor> ProductVendors
		{
			get { return this._productVendors; }
			set { this._productVendors.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649