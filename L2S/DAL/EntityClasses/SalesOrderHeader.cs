#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'SalesOrderHeader', mapped on table 'AdventureWorks.Sales.SalesOrderHeader'.</summary>
	[Table(Name="[Sales].[SalesOrderHeader]")]
	public partial class SalesOrderHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.String	_accountNumber;
		private System.Int32	_billToAddressId;
		private System.String	_comment;
		private System.Int32	_contactId;
		private System.String	_creditCardApprovalCode;
		private Nullable<System.Int32>	_creditCardId;
		private Nullable<System.Int32>	_currencyRateId;
		private System.Int32	_customerId;
		private System.DateTime	_dueDate;
		private System.Decimal	_freight;
		private System.DateTime	_modifiedDate;
		private System.Boolean	_onlineOrderFlag;
		private System.DateTime	_orderDate;
		private System.String	_purchaseOrderNumber;
		private System.Byte	_revisionNumber;
		private System.Guid	_rowguid;
		private System.Int32	_salesOrderId;
		private System.String	_salesOrderNumber;
		private Nullable<System.Int32>	_salesPersonId;
		private Nullable<System.DateTime>	_shipDate;
		private System.Int32	_shipMethodId;
		private System.Int32	_shipToAddressId;
		private System.Byte	_status;
		private System.Decimal	_subTotal;
		private System.Decimal	_taxAmt;
		private Nullable<System.Int32>	_territoryId;
		private System.Decimal	_totalDue;
		private EntityRef <Address> _address;
		private EntityRef <Address> _address1;
		private EntityRef <Contact> _contact;
		private EntityRef <CreditCard> _creditCard;
		private EntityRef <CurrencyRate> _currencyRate;
		private EntityRef <Customer> _customer;
		private EntitySet <SalesOrderDetail> _salesOrderDetails;
		private EntitySet <SalesOrderHeaderSalesReason> _salesOrderHeaderSalesReasons;
		private EntityRef <SalesPerson> _salesPerson;
		private EntityRef <SalesTerritory> _salesTerritory;
		private EntityRef <ShipMethod> _shipMethod;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnAccountNumberChanging(System.String value);
		partial void OnAccountNumberChanged();
		partial void OnBillToAddressIdChanging(System.Int32 value);
		partial void OnBillToAddressIdChanged();
		partial void OnCommentChanging(System.String value);
		partial void OnCommentChanged();
		partial void OnContactIdChanging(System.Int32 value);
		partial void OnContactIdChanged();
		partial void OnCreditCardApprovalCodeChanging(System.String value);
		partial void OnCreditCardApprovalCodeChanged();
		partial void OnCreditCardIdChanging(Nullable<System.Int32> value);
		partial void OnCreditCardIdChanged();
		partial void OnCurrencyRateIdChanging(Nullable<System.Int32> value);
		partial void OnCurrencyRateIdChanged();
		partial void OnCustomerIdChanging(System.Int32 value);
		partial void OnCustomerIdChanged();
		partial void OnDueDateChanging(System.DateTime value);
		partial void OnDueDateChanged();
		partial void OnFreightChanging(System.Decimal value);
		partial void OnFreightChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnOnlineOrderFlagChanging(System.Boolean value);
		partial void OnOnlineOrderFlagChanged();
		partial void OnOrderDateChanging(System.DateTime value);
		partial void OnOrderDateChanged();
		partial void OnPurchaseOrderNumberChanging(System.String value);
		partial void OnPurchaseOrderNumberChanged();
		partial void OnRevisionNumberChanging(System.Byte value);
		partial void OnRevisionNumberChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		partial void OnSalesOrderIdChanging(System.Int32 value);
		partial void OnSalesOrderIdChanged();
		partial void OnSalesOrderNumberChanging(System.String value);
		partial void OnSalesOrderNumberChanged();
		partial void OnSalesPersonIdChanging(Nullable<System.Int32> value);
		partial void OnSalesPersonIdChanged();
		partial void OnShipDateChanging(Nullable<System.DateTime> value);
		partial void OnShipDateChanged();
		partial void OnShipMethodIdChanging(System.Int32 value);
		partial void OnShipMethodIdChanged();
		partial void OnShipToAddressIdChanging(System.Int32 value);
		partial void OnShipToAddressIdChanged();
		partial void OnStatusChanging(System.Byte value);
		partial void OnStatusChanged();
		partial void OnSubTotalChanging(System.Decimal value);
		partial void OnSubTotalChanged();
		partial void OnTaxAmtChanging(System.Decimal value);
		partial void OnTaxAmtChanged();
		partial void OnTerritoryIdChanging(Nullable<System.Int32> value);
		partial void OnTerritoryIdChanged();
		partial void OnTotalDueChanging(System.Decimal value);
		partial void OnTotalDueChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="SalesOrderHeader"/> class.</summary>
		public SalesOrderHeader()
		{
			_address = default(EntityRef<Address>);
			_address1 = default(EntityRef<Address>);
			_contact = default(EntityRef<Contact>);
			_creditCard = default(EntityRef<CreditCard>);
			_currencyRate = default(EntityRef<CurrencyRate>);
			_customer = default(EntityRef<Customer>);
			_salesOrderDetails = new EntitySet<SalesOrderDetail>(new Action<SalesOrderDetail>(this.Attach_SalesOrderDetails), new Action<SalesOrderDetail>(this.Detach_SalesOrderDetails) );
			_salesOrderHeaderSalesReasons = new EntitySet<SalesOrderHeaderSalesReason>(new Action<SalesOrderHeaderSalesReason>(this.Attach_SalesOrderHeaderSalesReasons), new Action<SalesOrderHeaderSalesReason>(this.Detach_SalesOrderHeaderSalesReasons) );
			_salesPerson = default(EntityRef<SalesPerson>);
			_salesTerritory = default(EntityRef<SalesTerritory>);
			_shipMethod = default(EntityRef<ShipMethod>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesOrderDetails(SalesOrderDetail entity)
		{
			this.SendPropertyChanging("SalesOrderDetails");
			entity.SalesOrderHeader = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesOrderDetails(SalesOrderDetail entity)
		{
			this.SendPropertyChanging("SalesOrderDetails");
			entity.SalesOrderHeader = null;
		}

		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_SalesOrderHeaderSalesReasons(SalesOrderHeaderSalesReason entity)
		{
			this.SendPropertyChanging("SalesOrderHeaderSalesReasons");
			entity.SalesOrderHeader = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_SalesOrderHeaderSalesReasons(SalesOrderHeaderSalesReason entity)
		{
			this.SendPropertyChanging("SalesOrderHeaderSalesReasons");
			entity.SalesOrderHeader = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the AccountNumber field. Mapped on target field 'AccountNumber'. </summary>
		[Column(Name="AccountNumber", Storage="_accountNumber", DbType="nvarchar(15) NULL")]
		public System.String AccountNumber
		{
			get	{ return _accountNumber; }
			set
			{
				if((_accountNumber != value))
				{
					OnAccountNumberChanging(value);
					SendPropertyChanging("AccountNumber");
					_accountNumber = value;
					SendPropertyChanged("AccountNumber");
					OnAccountNumberChanged();
				}
			}
		}

		/// <summary>Gets or sets the BillToAddressId field. Mapped on target field 'BillToAddressID'. </summary>
		[Column(Name="BillToAddressID", Storage="_billToAddressId", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 BillToAddressId
		{
			get	{ return _billToAddressId; }
			set
			{
				if((_billToAddressId != value))
				{
					if(_address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnBillToAddressIdChanging(value);
					SendPropertyChanging("BillToAddressId");
					_billToAddressId = value;
					SendPropertyChanged("BillToAddressId");
					OnBillToAddressIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the Comment field. Mapped on target field 'Comment'. </summary>
		[Column(Name="Comment", Storage="_comment", DbType="nvarchar(128) NULL")]
		public System.String Comment
		{
			get	{ return _comment; }
			set
			{
				if((_comment != value))
				{
					OnCommentChanging(value);
					SendPropertyChanging("Comment");
					_comment = value;
					SendPropertyChanged("Comment");
					OnCommentChanged();
				}
			}
		}

		/// <summary>Gets or sets the ContactId field. Mapped on target field 'ContactID'. </summary>
		[Column(Name="ContactID", Storage="_contactId", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 ContactId
		{
			get	{ return _contactId; }
			set
			{
				if((_contactId != value))
				{
					if(_contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnContactIdChanging(value);
					SendPropertyChanging("ContactId");
					_contactId = value;
					SendPropertyChanged("ContactId");
					OnContactIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the CreditCardApprovalCode field. Mapped on target field 'CreditCardApprovalCode'. </summary>
		[Column(Name="CreditCardApprovalCode", Storage="_creditCardApprovalCode", DbType="varchar(15) NULL")]
		public System.String CreditCardApprovalCode
		{
			get	{ return _creditCardApprovalCode; }
			set
			{
				if((_creditCardApprovalCode != value))
				{
					OnCreditCardApprovalCodeChanging(value);
					SendPropertyChanging("CreditCardApprovalCode");
					_creditCardApprovalCode = value;
					SendPropertyChanged("CreditCardApprovalCode");
					OnCreditCardApprovalCodeChanged();
				}
			}
		}

		/// <summary>Gets or sets the CreditCardId field. Mapped on target field 'CreditCardID'. </summary>
		[Column(Name="CreditCardID", Storage="_creditCardId", DbType="int NULL")]
		public Nullable<System.Int32> CreditCardId
		{
			get	{ return _creditCardId; }
			set
			{
				if((_creditCardId != value))
				{
					if(_creditCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnCreditCardIdChanging(value);
					SendPropertyChanging("CreditCardId");
					_creditCardId = value;
					SendPropertyChanged("CreditCardId");
					OnCreditCardIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the CurrencyRateId field. Mapped on target field 'CurrencyRateID'. </summary>
		[Column(Name="CurrencyRateID", Storage="_currencyRateId", DbType="int NULL")]
		public Nullable<System.Int32> CurrencyRateId
		{
			get	{ return _currencyRateId; }
			set
			{
				if((_currencyRateId != value))
				{
					if(_currencyRate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnCurrencyRateIdChanging(value);
					SendPropertyChanging("CurrencyRateId");
					_currencyRateId = value;
					SendPropertyChanged("CurrencyRateId");
					OnCurrencyRateIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the CustomerId field. Mapped on target field 'CustomerID'. </summary>
		[Column(Name="CustomerID", Storage="_customerId", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 CustomerId
		{
			get	{ return _customerId; }
			set
			{
				if((_customerId != value))
				{
					if(_customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnCustomerIdChanging(value);
					SendPropertyChanging("CustomerId");
					_customerId = value;
					SendPropertyChanged("CustomerId");
					OnCustomerIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the DueDate field. Mapped on target field 'DueDate'. </summary>
		[Column(Name="DueDate", Storage="_dueDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime DueDate
		{
			get	{ return _dueDate; }
			set
			{
				if((_dueDate != value))
				{
					OnDueDateChanging(value);
					SendPropertyChanging("DueDate");
					_dueDate = value;
					SendPropertyChanged("DueDate");
					OnDueDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Freight field. Mapped on target field 'Freight'. </summary>
		[Column(Name="Freight", Storage="_freight", CanBeNull=false, DbType="money NOT NULL")]
		public System.Decimal Freight
		{
			get	{ return _freight; }
			set
			{
				if((_freight != value))
				{
					OnFreightChanging(value);
					SendPropertyChanging("Freight");
					_freight = value;
					SendPropertyChanged("Freight");
					OnFreightChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the OnlineOrderFlag field. Mapped on target field 'OnlineOrderFlag'. </summary>
		[Column(Name="OnlineOrderFlag", Storage="_onlineOrderFlag", CanBeNull=false, DbType="bit NOT NULL")]
		public System.Boolean OnlineOrderFlag
		{
			get	{ return _onlineOrderFlag; }
			set
			{
				if((_onlineOrderFlag != value))
				{
					OnOnlineOrderFlagChanging(value);
					SendPropertyChanging("OnlineOrderFlag");
					_onlineOrderFlag = value;
					SendPropertyChanged("OnlineOrderFlag");
					OnOnlineOrderFlagChanged();
				}
			}
		}

		/// <summary>Gets or sets the OrderDate field. Mapped on target field 'OrderDate'. </summary>
		[Column(Name="OrderDate", Storage="_orderDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime OrderDate
		{
			get	{ return _orderDate; }
			set
			{
				if((_orderDate != value))
				{
					OnOrderDateChanging(value);
					SendPropertyChanging("OrderDate");
					_orderDate = value;
					SendPropertyChanged("OrderDate");
					OnOrderDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the PurchaseOrderNumber field. Mapped on target field 'PurchaseOrderNumber'. </summary>
		[Column(Name="PurchaseOrderNumber", Storage="_purchaseOrderNumber", DbType="nvarchar(25) NULL")]
		public System.String PurchaseOrderNumber
		{
			get	{ return _purchaseOrderNumber; }
			set
			{
				if((_purchaseOrderNumber != value))
				{
					OnPurchaseOrderNumberChanging(value);
					SendPropertyChanging("PurchaseOrderNumber");
					_purchaseOrderNumber = value;
					SendPropertyChanged("PurchaseOrderNumber");
					OnPurchaseOrderNumberChanged();
				}
			}
		}

		/// <summary>Gets or sets the RevisionNumber field. Mapped on target field 'RevisionNumber'. </summary>
		[Column(Name="RevisionNumber", Storage="_revisionNumber", CanBeNull=false, DbType="tinyint NOT NULL")]
		public System.Byte RevisionNumber
		{
			get	{ return _revisionNumber; }
			set
			{
				if((_revisionNumber != value))
				{
					OnRevisionNumberChanging(value);
					SendPropertyChanging("RevisionNumber");
					_revisionNumber = value;
					SendPropertyChanged("RevisionNumber");
					OnRevisionNumberChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesOrderId field. Mapped on target field 'SalesOrderID'. </summary>
		[Column(Name="SalesOrderID", Storage="_salesOrderId", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Int32 SalesOrderId
		{
			get	{ return _salesOrderId; }
			set
			{
				if((_salesOrderId != value))
				{
					OnSalesOrderIdChanging(value);
					SendPropertyChanging("SalesOrderId");
					_salesOrderId = value;
					SendPropertyChanged("SalesOrderId");
					OnSalesOrderIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the SalesOrderNumber field. Mapped on target field 'SalesOrderNumber'. </summary>
		[Column(Name="SalesOrderNumber", Storage="_salesOrderNumber", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="nvarchar(25) NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.String SalesOrderNumber
		{
			get	{ return _salesOrderNumber; }
		}

		/// <summary>Gets or sets the SalesPersonId field. Mapped on target field 'SalesPersonID'. </summary>
		[Column(Name="SalesPersonID", Storage="_salesPersonId", DbType="int NULL")]
		public Nullable<System.Int32> SalesPersonId
		{
			get	{ return _salesPersonId; }
			set
			{
				if((_salesPersonId != value))
				{
					if(_salesPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnSalesPersonIdChanging(value);
					SendPropertyChanging("SalesPersonId");
					_salesPersonId = value;
					SendPropertyChanged("SalesPersonId");
					OnSalesPersonIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ShipDate field. Mapped on target field 'ShipDate'. </summary>
		[Column(Name="ShipDate", Storage="_shipDate", DbType="datetime NULL")]
		public Nullable<System.DateTime> ShipDate
		{
			get	{ return _shipDate; }
			set
			{
				if((_shipDate != value))
				{
					OnShipDateChanging(value);
					SendPropertyChanging("ShipDate");
					_shipDate = value;
					SendPropertyChanged("ShipDate");
					OnShipDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the ShipMethodId field. Mapped on target field 'ShipMethodID'. </summary>
		[Column(Name="ShipMethodID", Storage="_shipMethodId", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 ShipMethodId
		{
			get	{ return _shipMethodId; }
			set
			{
				if((_shipMethodId != value))
				{
					if(_shipMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnShipMethodIdChanging(value);
					SendPropertyChanging("ShipMethodId");
					_shipMethodId = value;
					SendPropertyChanged("ShipMethodId");
					OnShipMethodIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the ShipToAddressId field. Mapped on target field 'ShipToAddressID'. </summary>
		[Column(Name="ShipToAddressID", Storage="_shipToAddressId", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 ShipToAddressId
		{
			get	{ return _shipToAddressId; }
			set
			{
				if((_shipToAddressId != value))
				{
					if(_address1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnShipToAddressIdChanging(value);
					SendPropertyChanging("ShipToAddressId");
					_shipToAddressId = value;
					SendPropertyChanged("ShipToAddressId");
					OnShipToAddressIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the Status field. Mapped on target field 'Status'. </summary>
		[Column(Name="Status", Storage="_status", CanBeNull=false, DbType="tinyint NOT NULL")]
		public System.Byte Status
		{
			get	{ return _status; }
			set
			{
				if((_status != value))
				{
					OnStatusChanging(value);
					SendPropertyChanging("Status");
					_status = value;
					SendPropertyChanged("Status");
					OnStatusChanged();
				}
			}
		}

		/// <summary>Gets or sets the SubTotal field. Mapped on target field 'SubTotal'. </summary>
		[Column(Name="SubTotal", Storage="_subTotal", CanBeNull=false, DbType="money NOT NULL")]
		public System.Decimal SubTotal
		{
			get	{ return _subTotal; }
			set
			{
				if((_subTotal != value))
				{
					OnSubTotalChanging(value);
					SendPropertyChanging("SubTotal");
					_subTotal = value;
					SendPropertyChanged("SubTotal");
					OnSubTotalChanged();
				}
			}
		}

		/// <summary>Gets or sets the TaxAmt field. Mapped on target field 'TaxAmt'. </summary>
		[Column(Name="TaxAmt", Storage="_taxAmt", CanBeNull=false, DbType="money NOT NULL")]
		public System.Decimal TaxAmt
		{
			get	{ return _taxAmt; }
			set
			{
				if((_taxAmt != value))
				{
					OnTaxAmtChanging(value);
					SendPropertyChanging("TaxAmt");
					_taxAmt = value;
					SendPropertyChanged("TaxAmt");
					OnTaxAmtChanged();
				}
			}
		}

		/// <summary>Gets or sets the TerritoryId field. Mapped on target field 'TerritoryID'. </summary>
		[Column(Name="TerritoryID", Storage="_territoryId", DbType="int NULL")]
		public Nullable<System.Int32> TerritoryId
		{
			get	{ return _territoryId; }
			set
			{
				if((_territoryId != value))
				{
					if(_salesTerritory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnTerritoryIdChanging(value);
					SendPropertyChanging("TerritoryId");
					_territoryId = value;
					SendPropertyChanged("TerritoryId");
					OnTerritoryIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the TotalDue field. Mapped on target field 'TotalDue'. </summary>
		[Column(Name="TotalDue", Storage="_totalDue", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="money NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Decimal TotalDue
		{
			get	{ return _totalDue; }
		}

		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.Address - Address.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_Address947db26d776746528cad265631f42f16", Storage="_address", ThisKey="BillToAddressId", IsForeignKey=true)] 
		public Address Address
		{
			get { return _address.Entity; }
			set
			{
				Address previousValue = _address.Entity;
				if((previousValue != value) || (_address.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Address");
					if(previousValue != null)
					{
						_address.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					_address.Entity = value;
					if(value == null)
					{
						_billToAddressId = default(System.Int32);
					}
					else
					{
						value.SalesOrderHeaders.Add(this);
						_billToAddressId = value.AddressId;
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.Address1 - Address.SalesOrderHeaders1 (m:1)'</summary>
		[Association(Name="SalesOrderHeader_Addressc3a2cfc434b44655acce779f61874e83", Storage="_address1", ThisKey="ShipToAddressId", IsForeignKey=true)] 
		public Address Address1
		{
			get { return _address1.Entity; }
			set
			{
				Address previousValue = _address1.Entity;
				if((previousValue != value) || (_address1.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Address1");
					if(previousValue != null)
					{
						_address1.Entity = null;
						previousValue.SalesOrderHeaders1.Remove(this);
					}
					_address1.Entity = value;
					if(value == null)
					{
						_shipToAddressId = default(System.Int32);
					}
					else
					{
						value.SalesOrderHeaders1.Add(this);
						_shipToAddressId = value.AddressId;
					}
					this.SendPropertyChanged("Address1");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.Contact - Contact.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_Contact9fca4fd4d9b44d1d8c1a3b2278adcdfc", Storage="_contact", ThisKey="ContactId", IsForeignKey=true)] 
		public Contact Contact
		{
			get { return _contact.Entity; }
			set
			{
				Contact previousValue = _contact.Entity;
				if((previousValue != value) || (_contact.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Contact");
					if(previousValue != null)
					{
						_contact.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					_contact.Entity = value;
					if(value == null)
					{
						_contactId = default(System.Int32);
					}
					else
					{
						value.SalesOrderHeaders.Add(this);
						_contactId = value.ContactId;
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.CreditCard - CreditCard.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_CreditCard62645e1acfea4062a44a173c3b728b48", Storage="_creditCard", ThisKey="CreditCardId", IsForeignKey=true)] 
		public CreditCard CreditCard
		{
			get { return _creditCard.Entity; }
			set
			{
				CreditCard previousValue = _creditCard.Entity;
				if((previousValue != value) || (_creditCard.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("CreditCard");
					if(previousValue != null)
					{
						_creditCard.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					_creditCard.Entity = value;
					if(value == null)
					{
						_creditCardId = default(Nullable<System.Int32>);
					}
					else
					{
						value.SalesOrderHeaders.Add(this);
						_creditCardId = value.CreditCardId;
					}
					this.SendPropertyChanged("CreditCard");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.CurrencyRate - CurrencyRate.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_CurrencyRate2a98408d9c8d4fdea0b97c67537cefe6", Storage="_currencyRate", ThisKey="CurrencyRateId", IsForeignKey=true)] 
		public CurrencyRate CurrencyRate
		{
			get { return _currencyRate.Entity; }
			set
			{
				CurrencyRate previousValue = _currencyRate.Entity;
				if((previousValue != value) || (_currencyRate.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("CurrencyRate");
					if(previousValue != null)
					{
						_currencyRate.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					_currencyRate.Entity = value;
					if(value == null)
					{
						_currencyRateId = default(Nullable<System.Int32>);
					}
					else
					{
						value.SalesOrderHeaders.Add(this);
						_currencyRateId = value.CurrencyRateId;
					}
					this.SendPropertyChanged("CurrencyRate");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.Customer - Customer.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_Customera533767fd56a4286a9472c3a224240b7", Storage="_customer", ThisKey="CustomerId", IsForeignKey=true)] 
		public Customer Customer
		{
			get { return _customer.Entity; }
			set
			{
				Customer previousValue = _customer.Entity;
				if((previousValue != value) || (_customer.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Customer");
					if(previousValue != null)
					{
						_customer.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					_customer.Entity = value;
					if(value == null)
					{
						_customerId = default(System.Int32);
					}
					else
					{
						value.SalesOrderHeaders.Add(this);
						_customerId = value.CustomerId;
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderDetail.SalesOrderHeader - SalesOrderHeader.SalesOrderDetails (m:1)'</summary>
		[Association(Name="SalesOrderDetail_SalesOrderHeader166045216bca4ff9b765c87f30cbd21b", Storage="_salesOrderDetails", OtherKey="SalesOrderId")]
		public EntitySet<SalesOrderDetail> SalesOrderDetails
		{
			get { return this._salesOrderDetails; }
			set { this._salesOrderDetails.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeaderSalesReason.SalesOrderHeader - SalesOrderHeader.SalesOrderHeaderSalesReasons (m:1)'</summary>
		[Association(Name="SalesOrderHeaderSalesReason_SalesOrderHeader68f26056cadd4176ae24242152d55625", Storage="_salesOrderHeaderSalesReasons", OtherKey="SalesOrderId")]
		public EntitySet<SalesOrderHeaderSalesReason> SalesOrderHeaderSalesReasons
		{
			get { return this._salesOrderHeaderSalesReasons; }
			set { this._salesOrderHeaderSalesReasons.Assign(value); }
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.SalesPerson - SalesPerson.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_SalesPerson2b7ba8c290a147d1ae5168e33baab2d6", Storage="_salesPerson", ThisKey="SalesPersonId", IsForeignKey=true)] 
		public SalesPerson SalesPerson
		{
			get { return _salesPerson.Entity; }
			set
			{
				SalesPerson previousValue = _salesPerson.Entity;
				if((previousValue != value) || (_salesPerson.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SalesPerson");
					if(previousValue != null)
					{
						_salesPerson.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					_salesPerson.Entity = value;
					if(value == null)
					{
						_salesPersonId = default(Nullable<System.Int32>);
					}
					else
					{
						value.SalesOrderHeaders.Add(this);
						_salesPersonId = value.SalesPersonId;
					}
					this.SendPropertyChanged("SalesPerson");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.SalesTerritory - SalesTerritory.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_SalesTerritory44b37e7be3f647bbaf0db7376144a05b", Storage="_salesTerritory", ThisKey="TerritoryId", IsForeignKey=true)] 
		public SalesTerritory SalesTerritory
		{
			get { return _salesTerritory.Entity; }
			set
			{
				SalesTerritory previousValue = _salesTerritory.Entity;
				if((previousValue != value) || (_salesTerritory.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("SalesTerritory");
					if(previousValue != null)
					{
						_salesTerritory.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					_salesTerritory.Entity = value;
					if(value == null)
					{
						_territoryId = default(Nullable<System.Int32>);
					}
					else
					{
						value.SalesOrderHeaders.Add(this);
						_territoryId = value.TerritoryId;
					}
					this.SendPropertyChanged("SalesTerritory");
				}
			}
		}
		
		/// <summary>Represents the navigator which is mapped onto the association 'SalesOrderHeader.ShipMethod - ShipMethod.SalesOrderHeaders (m:1)'</summary>
		[Association(Name="SalesOrderHeader_ShipMethod0ce9292213f34021bfac3b45ea675e26", Storage="_shipMethod", ThisKey="ShipMethodId", IsForeignKey=true)] 
		public ShipMethod ShipMethod
		{
			get { return _shipMethod.Entity; }
			set
			{
				ShipMethod previousValue = _shipMethod.Entity;
				if((previousValue != value) || (_shipMethod.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("ShipMethod");
					if(previousValue != null)
					{
						_shipMethod.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					_shipMethod.Entity = value;
					if(value == null)
					{
						_shipMethodId = default(System.Int32);
					}
					else
					{
						value.SalesOrderHeaders.Add(this);
						_shipMethodId = value.ShipMethodId;
					}
					this.SendPropertyChanged("ShipMethod");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649