#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'Document', mapped on table 'AdventureWorks.Production.Document'.</summary>
	[Table(Name="[Production].[Document]")]
	public partial class Document : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_changeNumber;
		private System.Data.Linq.Binary	_documentData;
		private System.Int32	_documentId;
		private System.String	_documentSummary;
		private System.String	_fileExtension;
		private System.String	_fileName;
		private System.DateTime	_modifiedDate;
		private System.String	_revision;
		private System.Byte	_status;
		private System.String	_title;
		private EntitySet <ProductDocument> _productDocuments;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnChangeNumberChanging(System.Int32 value);
		partial void OnChangeNumberChanged();
		partial void OnDocumentDataChanging(System.Data.Linq.Binary value);
		partial void OnDocumentDataChanged();
		partial void OnDocumentIdChanging(System.Int32 value);
		partial void OnDocumentIdChanged();
		partial void OnDocumentSummaryChanging(System.String value);
		partial void OnDocumentSummaryChanged();
		partial void OnFileExtensionChanging(System.String value);
		partial void OnFileExtensionChanged();
		partial void OnFileNameChanging(System.String value);
		partial void OnFileNameChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnRevisionChanging(System.String value);
		partial void OnRevisionChanged();
		partial void OnStatusChanging(System.Byte value);
		partial void OnStatusChanged();
		partial void OnTitleChanging(System.String value);
		partial void OnTitleChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="Document"/> class.</summary>
		public Document()
		{
			_productDocuments = new EntitySet<ProductDocument>(new Action<ProductDocument>(this.Attach_ProductDocuments), new Action<ProductDocument>(this.Detach_ProductDocuments) );
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		/// <summary>Attaches this instance to the entity specified as an associated entity</summary>
		/// <param name="entity">The related entity to attach to</param>
		private void Attach_ProductDocuments(ProductDocument entity)
		{
			this.SendPropertyChanging("ProductDocuments");
			entity.Document = this;
		}
		
		/// <summary>Detaches this instance from the entity specified so it's no longer an associated entity</summary>
		/// <param name="entity">The related entity to detach from</param>
		private void Detach_ProductDocuments(ProductDocument entity)
		{
			this.SendPropertyChanging("ProductDocuments");
			entity.Document = null;
		}


		#region Class Property Declarations
		/// <summary>Gets or sets the ChangeNumber field. Mapped on target field 'ChangeNumber'. </summary>
		[Column(Name="ChangeNumber", Storage="_changeNumber", CanBeNull=false, DbType="int NOT NULL")]
		public System.Int32 ChangeNumber
		{
			get	{ return _changeNumber; }
			set
			{
				if((_changeNumber != value))
				{
					OnChangeNumberChanging(value);
					SendPropertyChanging("ChangeNumber");
					_changeNumber = value;
					SendPropertyChanged("ChangeNumber");
					OnChangeNumberChanged();
				}
			}
		}

		/// <summary>Gets or sets the DocumentData field. Mapped on target field 'Document'. </summary>
		[Column(Name="Document", Storage="_documentData", DbType="varbinary(MAX) NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary DocumentData
		{
			get	{ return _documentData; }
			set
			{
				if((_documentData != value))
				{
					OnDocumentDataChanging(value);
					SendPropertyChanging("DocumentData");
					_documentData = value;
					SendPropertyChanged("DocumentData");
					OnDocumentDataChanged();
				}
			}
		}

		/// <summary>Gets or sets the DocumentId field. Mapped on target field 'DocumentID'. </summary>
		[Column(Name="DocumentID", Storage="_documentId", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Int32 DocumentId
		{
			get	{ return _documentId; }
			set
			{
				if((_documentId != value))
				{
					OnDocumentIdChanging(value);
					SendPropertyChanging("DocumentId");
					_documentId = value;
					SendPropertyChanged("DocumentId");
					OnDocumentIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the DocumentSummary field. Mapped on target field 'DocumentSummary'. </summary>
		[Column(Name="DocumentSummary", Storage="_documentSummary", DbType="nvarchar(MAX) NULL", UpdateCheck=UpdateCheck.Never)]
		public System.String DocumentSummary
		{
			get	{ return _documentSummary; }
			set
			{
				if((_documentSummary != value))
				{
					OnDocumentSummaryChanging(value);
					SendPropertyChanging("DocumentSummary");
					_documentSummary = value;
					SendPropertyChanged("DocumentSummary");
					OnDocumentSummaryChanged();
				}
			}
		}

		/// <summary>Gets or sets the FileExtension field. Mapped on target field 'FileExtension'. </summary>
		[Column(Name="FileExtension", Storage="_fileExtension", CanBeNull=false, DbType="nvarchar(8) NOT NULL")]
		public System.String FileExtension
		{
			get	{ return _fileExtension; }
			set
			{
				if((_fileExtension != value))
				{
					OnFileExtensionChanging(value);
					SendPropertyChanging("FileExtension");
					_fileExtension = value;
					SendPropertyChanged("FileExtension");
					OnFileExtensionChanged();
				}
			}
		}

		/// <summary>Gets or sets the FileName field. Mapped on target field 'FileName'. </summary>
		[Column(Name="FileName", Storage="_fileName", CanBeNull=false, DbType="nvarchar(400) NOT NULL")]
		public System.String FileName
		{
			get	{ return _fileName; }
			set
			{
				if((_fileName != value))
				{
					OnFileNameChanging(value);
					SendPropertyChanging("FileName");
					_fileName = value;
					SendPropertyChanged("FileName");
					OnFileNameChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Revision field. Mapped on target field 'Revision'. </summary>
		[Column(Name="Revision", Storage="_revision", CanBeNull=false, DbType="nchar(5) NOT NULL")]
		public System.String Revision
		{
			get	{ return _revision; }
			set
			{
				if((_revision != value))
				{
					OnRevisionChanging(value);
					SendPropertyChanging("Revision");
					_revision = value;
					SendPropertyChanged("Revision");
					OnRevisionChanged();
				}
			}
		}

		/// <summary>Gets or sets the Status field. Mapped on target field 'Status'. </summary>
		[Column(Name="Status", Storage="_status", CanBeNull=false, DbType="tinyint NOT NULL")]
		public System.Byte Status
		{
			get	{ return _status; }
			set
			{
				if((_status != value))
				{
					OnStatusChanging(value);
					SendPropertyChanging("Status");
					_status = value;
					SendPropertyChanged("Status");
					OnStatusChanged();
				}
			}
		}

		/// <summary>Gets or sets the Title field. Mapped on target field 'Title'. </summary>
		[Column(Name="Title", Storage="_title", CanBeNull=false, DbType="nvarchar(50) NOT NULL")]
		public System.String Title
		{
			get	{ return _title; }
			set
			{
				if((_title != value))
				{
					OnTitleChanging(value);
					SendPropertyChanging("Title");
					_title = value;
					SendPropertyChanged("Title");
					OnTitleChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'ProductDocument.Document - Document.ProductDocuments (m:1)'</summary>
		[Association(Name="ProductDocument_Document7d25a883933044f3ac84d05bb0f3c88c", Storage="_productDocuments", OtherKey="DocumentId")]
		public EntitySet<ProductDocument> ProductDocuments
		{
			get { return this._productDocuments; }
			set { this._productDocuments.Assign(value); }
		}
		
		#endregion
	}
}
#pragma warning restore 0649