#pragma warning disable 0649
//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.ComponentModel;

namespace L2S.Bencher.EntityClasses
{
	/// <summary>Class which represents the entity 'EmailAddress', mapped on table 'AdventureWorks.Person.EmailAddress'.</summary>
	[Table(Name="[Person].[EmailAddress]")]
	public partial class EmailAddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		#region Events
		/// <summary>Event which is raised when a property value is changing.</summary>
		public event PropertyChangingEventHandler PropertyChanging;
		/// <summary>Event which is raised when a property value changes.</summary>
		public event PropertyChangedEventHandler PropertyChanged;
		#endregion
		
		#region Class Member Declarations
		private System.Int32	_businessEntityId;
		private System.Int32	_emailAddressId;
		private System.String	_emailAddressValue;
		private System.DateTime	_modifiedDate;
		private System.Guid	_rowguid;
		private EntityRef <Person> _person;
		#endregion
		
		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnBusinessEntityIdChanging(System.Int32 value);
		partial void OnBusinessEntityIdChanged();
		partial void OnEmailAddressIdChanging(System.Int32 value);
		partial void OnEmailAddressIdChanged();
		partial void OnEmailAddressValueChanging(System.String value);
		partial void OnEmailAddressValueChanged();
		partial void OnModifiedDateChanging(System.DateTime value);
		partial void OnModifiedDateChanged();
		partial void OnRowguidChanging(System.Guid value);
		partial void OnRowguidChanged();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="EmailAddress"/> class.</summary>
		public EmailAddress()
		{
			_person = default(EntityRef<Person>);
			OnCreated();
		}

		/// <summary>Raises the PropertyChanging event</summary>
		/// <param name="propertyName">name of the property which is changing</param>
		protected virtual void SendPropertyChanging(string propertyName)
		{
			if((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>Raises the PropertyChanged event for the property specified</summary>
		/// <param name="propertyName">name of the property which was changed</param>
		protected virtual void SendPropertyChanged(string propertyName)
		{
			if((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		

		#region Class Property Declarations
		/// <summary>Gets or sets the BusinessEntityId field. Mapped on target field 'BusinessEntityID'. </summary>
		[Column(Name="BusinessEntityID", Storage="_businessEntityId", CanBeNull=false, DbType="int NOT NULL", IsPrimaryKey=true)]
		public System.Int32 BusinessEntityId
		{
			get	{ return _businessEntityId; }
			set
			{
				if((_businessEntityId != value))
				{
					if(_person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					OnBusinessEntityIdChanging(value);
					SendPropertyChanging("BusinessEntityId");
					_businessEntityId = value;
					SendPropertyChanged("BusinessEntityId");
					OnBusinessEntityIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the EmailAddressId field. Mapped on target field 'EmailAddressID'. </summary>
		[Column(Name="EmailAddressID", Storage="_emailAddressId", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Int32 EmailAddressId
		{
			get	{ return _emailAddressId; }
			set
			{
				if((_emailAddressId != value))
				{
					OnEmailAddressIdChanging(value);
					SendPropertyChanging("EmailAddressId");
					_emailAddressId = value;
					SendPropertyChanged("EmailAddressId");
					OnEmailAddressIdChanged();
				}
			}
		}

		/// <summary>Gets or sets the EmailAddressValue field. Mapped on target field 'EmailAddress'. </summary>
		[Column(Name="EmailAddress", Storage="_emailAddressValue", DbType="nvarchar(50) NULL")]
		public System.String EmailAddressValue
		{
			get	{ return _emailAddressValue; }
			set
			{
				if((_emailAddressValue != value))
				{
					OnEmailAddressValueChanging(value);
					SendPropertyChanging("EmailAddressValue");
					_emailAddressValue = value;
					SendPropertyChanged("EmailAddressValue");
					OnEmailAddressValueChanged();
				}
			}
		}

		/// <summary>Gets or sets the ModifiedDate field. Mapped on target field 'ModifiedDate'. </summary>
		[Column(Name="ModifiedDate", Storage="_modifiedDate", CanBeNull=false, DbType="datetime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get	{ return _modifiedDate; }
			set
			{
				if((_modifiedDate != value))
				{
					OnModifiedDateChanging(value);
					SendPropertyChanging("ModifiedDate");
					_modifiedDate = value;
					SendPropertyChanged("ModifiedDate");
					OnModifiedDateChanged();
				}
			}
		}

		/// <summary>Gets or sets the Rowguid field. Mapped on target field 'rowguid'. </summary>
		[Column(Name="rowguid", Storage="_rowguid", AutoSync=AutoSync.OnInsert, CanBeNull=false, DbType="uniqueidentifier NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid Rowguid
		{
			get	{ return _rowguid; }
			set
			{
				if((_rowguid != value))
				{
					OnRowguidChanging(value);
					SendPropertyChanging("Rowguid");
					_rowguid = value;
					SendPropertyChanged("Rowguid");
					OnRowguidChanged();
				}
			}
		}

		/// <summary>Represents the navigator which is mapped onto the association 'EmailAddress.Person - Person.EmailAddresses (m:1)'</summary>
		[Association(Name="EmailAddress_Person359d8694c6ab47c5ad6f560a56830e6a", Storage="_person", ThisKey="BusinessEntityId", IsForeignKey=true)] 
		public Person Person
		{
			get { return _person.Entity; }
			set
			{
				Person previousValue = _person.Entity;
				if((previousValue != value) || (_person.HasLoadedOrAssignedValue == false))
				{
					this.SendPropertyChanging("Person");
					if(previousValue != null)
					{
						_person.Entity = null;
						previousValue.EmailAddresses.Remove(this);
					}
					_person.Entity = value;
					if(value == null)
					{
						_businessEntityId = default(System.Int32);
					}
					else
					{
						value.EmailAddresses.Add(this);
						_businessEntityId = value.BusinessEntityId;
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		#endregion
	}
}
#pragma warning restore 0649