//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v4.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using NHibernate;
using NHibernate.Cfg;

namespace NH.Bencher
{
	/// <summary>Small, simple session manager class which initializes NHibernate's session factory and loads the configuration.</summary>
	public static partial class SessionManager
	{
		#region Class Member Declarations
		private static readonly ISessionFactory _sessionFactory;
		private static readonly Configuration _configuration;
		#endregion

		/// <summary>Initializes the <see cref="SessionManager"/> class.</summary>
		static SessionManager()
		{
			_configuration = new Configuration();
			_configuration.Configure();
			_configuration.AddAssembly(typeof(SessionManager).Assembly);
			_sessionFactory = _configuration.BuildSessionFactory();
		}

		/// <summary>Opens a new session on the existing session factory</summary>
		/// <returns>ready to use ISession instance</returns>
		/// <remarks>Dispose this instance after you're done with the instance, so after lazy loading has occured. The returned
		/// ISession instance is <b>not</b> thread safe.</remarks>
		public static ISession OpenSession()
		{
			return _sessionFactory.OpenSession();
		}

		#region Class Property Declarations
		/// <summary>Gets the session factory created from the initialized configuration. The returned factory is thread safe.</summary>
		public static ISessionFactory SessionFactory
		{
			get { return _sessionFactory; }
		}
		#endregion
	}
}
